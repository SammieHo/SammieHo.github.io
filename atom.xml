<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SammieHo&#39;s 学习慢炖</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-19T11:53:52.181Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sammieho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 入门学习笔记</title>
    <link href="http://yoursite.com/2017/02/19/webpack/"/>
    <id>http://yoursite.com/2017/02/19/webpack/</id>
    <published>2017-02-19T11:50:01.727Z</published>
    <updated>2017-02-19T11:53:52.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack入门学习笔记"><a href="#webpack入门学习笔记" class="headerlink" title="webpack入门学习笔记"></a>webpack入门学习笔记</h1><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><p><a href="https://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="external">官网</a>是这么说的~(≧▽≦)/~</p>
<blockquote>
<p>webpack is a module bundler.</p>
</blockquote>
<p>webpack是一个模块打包工具，将静态资源打包。</p>
<blockquote>
<p>webpack takes modules with dependencies and generates static assets representing those modules.</p>
</blockquote>
<p>根据模块的依赖关系进行静态分析，然后将这些模块按照指定关系生成静态资源。</p>
<p>顺便引用官网的图<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">![](https://webpack.github.io/assets/what-is-webpack.png)</div><div class="line"></div><div class="line">ps：我目前还理解的比较浅显，回来继续更~~~接着下面</div><div class="line"></div><div class="line">## why？</div><div class="line"></div><div class="line">我的理解：</div><div class="line">1. 支持 同步sync 和 异步async 两种模块机制。</div><div class="line">2. 支持 Loaders，处理样式sass编译等，目前我只用过css打包成js（羞愧脸~~~~(&gt;_&lt;)~~~~）</div><div class="line">3. 很多插件，代码压缩、热替换、生成html等。</div><div class="line"></div><div class="line">## how？</div><div class="line"></div><div class="line">&gt; 借这里来回想怎么安装的，基本的结构，方便以后查阅，嘻嘻嘻。</div><div class="line"></div><div class="line">#### 准备工作</div><div class="line"></div><div class="line">1. 首先要有NodeJS, 因为自带npm，之后安装模块很常用到！</div><div class="line"></div><div class="line">2. 用 npm 安装全局 webpack</div><div class="line">```</div><div class="line">$ npm install webpack -g</div><div class="line">```</div><div class="line"></div><div class="line">#### 配置</div><div class="line"></div><div class="line">##### 进入项目目录，初始化 package.json</div><div class="line">```</div><div class="line">$ npm init</div><div class="line">```</div><div class="line">** 注意：** 在 &quot;main&quot; 中设置好入口文件 entry.js</div><div class="line"></div><div class="line">##### 在项目下安装对webpack的依赖</div><div class="line">```</div><div class="line">$ npm install webpack --save-dev</div><div class="line">```</div><div class="line">生成 node_modules 文件夹</div><div class="line"></div><div class="line">##### 新建文件夹 bin,src 分别存放 bundled file和 source file</div><div class="line">```</div><div class="line">mkdir src bin</div><div class="line">```</div><div class="line">有些 bin 又用 dist,build; src 用 app, 习惯不同而已。</div><div class="line"></div><div class="line">##### 新建出口文件index.html</div><div class="line">```</div><div class="line">cd.&gt;index.html</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;script src=&quot;bin/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">```</div><div class="line"></div><div class="line">##### bin 新建 bundle.js , src 新建 entry.js</div><div class="line">```</div><div class="line">cd.&gt;bin/bundle.js</div><div class="line">cd.&gt;src/entry.js</div><div class="line">```</div><div class="line"></div><div class="line">最后，文档结构是这样的。</div><div class="line">![](http://p1.bqimg.com/567571/b0fb9cc67a9d5a23.png)</div><div class="line"></div><div class="line">至此，可以开始编码了，下面是一些补充内容~~</div></pre></td></tr></table></figure></p>
<h4 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>webpack.config.js 是配置文件，之后直接 webpack 就可以打包。<br>里面包含 入口 entry，输出 output，模块 module<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p1.bqimg.com/567571/a3b98bc3e148aeba.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h5 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h5><p>应用首次加载的文件，也是webpack开始追踪分析的依赖模块的入口。</p>
<h5 id="监视每个文件"><a href="#监视每个文件" class="headerlink" title="监视每个文件"></a>监视每个文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<p>若文件有变化，就会重新编译并加到缓存。若无，则直接使用缓存。</p>
<h5 id="目前我对webpack的理解与应用"><a href="#目前我对webpack的理解与应用" class="headerlink" title="目前我对webpack的理解与应用"></a>目前我对webpack的理解与应用</h5><ul>
<li>了解如何使用，配置。</li>
<li>会将css打包成js</li>
<li>编译sass，进行css,js,image的压缩，生成hash值来作为版本区分。</li>
<li>jsx解释，ES6应用</li>
</ul>
<h5 id="webpack的应用场景"><a href="#webpack的应用场景" class="headerlink" title="webpack的应用场景"></a>webpack的应用场景</h5><ul>
<li>单页应用（spa），因为webpack主张将所有东西打包一起，打包成一个文件，有一个或多个入口，只有一个出口。</li>
<li>React 相关应用</li>
<li>移动端网页开发，主张简约、组件化，添加hash解决静态文件缓存严重的问题。</li>
</ul>
<h5 id="需注意的问题："><a href="#需注意的问题：" class="headerlink" title="需注意的问题："></a>需注意的问题：</h5><ul>
<li>能根据配置来自动加载模块，但不能自动安装需要的模块。</li>
<li>不能处理雪碧图。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webpack入门学习笔记&quot;&gt;&lt;a href=&quot;#webpack入门学习笔记&quot; class=&quot;headerlink&quot; title=&quot;webpack入门学习笔记&quot;&gt;&lt;/a&gt;webpack入门学习笔记&lt;/h1&gt;&lt;h2 id=&quot;what？&quot;&gt;&lt;a href=&quot;#what
    
    </summary>
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>css 水平/垂直居中</title>
    <link href="http://yoursite.com/2017/02/15/%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2017/02/15/水平居中/</id>
    <published>2017-02-15T12:48:05.024Z</published>
    <updated>2017-02-17T11:59:41.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>垂直水平居中方法：</p>
<ol>
<li>绝对定位</li>
<li>负外边距</li>
<li>flexbox</li>
<li>inline-block</li>
<li>display:table-cell</li>
</ol>
<p>浮动元素横向显示并居中</p>
<ol>
<li>父元素设为text-center,子元素设为inline-block</li>
<li>父元素width:fit-content;margin:auto; 子元素 float:left</li>
</ol>
</blockquote>
<p>#水平居中</p>
<h2 id="浮动元素横向显示并居中"><a href="#浮动元素横向显示并居中" class="headerlink" title="浮动元素横向显示并居中"></a>浮动元素横向显示并居中</h2><p>思路1：将ul设为display:inline-block;ul的父元素nav设为text-align：center</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">html：</div><div class="line">&lt;nav&gt;</div><div class="line">	&lt;ul&gt;</div><div class="line">		&lt;li&gt;block1&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">&lt;/nav&gt;</div><div class="line"></div><div class="line">css:</div><div class="line">nav&#123; text-align:center; &#125;</div><div class="line">ul&#123; display: inline-block; &#125;</div><div class="line">li&#123;</div><div class="line">	float:left;</div><div class="line">	list-style:none;</div><div class="line">	padding:10px 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="因此：行内元素，给父元素设置text-align-center"><a href="#因此：行内元素，给父元素设置text-align-center" class="headerlink" title="因此：行内元素，给父元素设置text-align:center;"></a>因此：行内元素，给父元素设置text-align:center;</h2><p>思路2：子元素包含float:left; 运用css3新特性，将父元素设置为width:fit-content,并配合margin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HTML:</div><div class="line">&lt;ul&gt;</div><div class="line">	&lt;li&gt;block1&lt;/li&gt;</div><div class="line">	&lt;li&gt;block2&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">CSS:</div><div class="line">ul&#123;</div><div class="line">	width:fit-content;</div><div class="line">	margin:0 auto;</div><div class="line">&#125;</div><div class="line">li&#123;float:left&#125;</div></pre></td></tr></table></figure></p>
<h2 id="块级元素，有固定宽度，该元素设置margin-0-auto"><a href="#块级元素，有固定宽度，该元素设置margin-0-auto" class="headerlink" title="块级元素，有固定宽度，该元素设置margin:0 auto;"></a>块级元素，有固定宽度，该元素设置margin:0 auto;</h2><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>思路1：有固定的宽度，负外编剧(-margin)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">span&#123;</div><div class="line">		width: 200px;</div><div class="line">		height: 200px;</div><div class="line">		background: red;</div><div class="line">		position: absolute;</div><div class="line">		left: 50%;</div><div class="line">		margin-left: -100px;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>思路2：left,right,top,bottom.等为 百分比 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">span&#123;</div><div class="line">	position: absolute;</div><div class="line">	left:25%;</div><div class="line">	right: 25%;</div><div class="line">	//那么 内容的宽度为50%；</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>思路：子元素设置flex</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.son&#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#垂直居中</p>
<h2 id="绝对垂直居中"><a href="#绝对垂直居中" class="headerlink" title="绝对垂直居中"></a>绝对垂直居中</h2><blockquote>
<p>常用在弹出层的定位中,需要声明元素高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.md-warp&#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.md-main&#123;</div><div class="line">    position: absolute;</div><div class="line">    top: 0;</div><div class="line">    right: 0;</div><div class="line">    bottom: 0;</div><div class="line">    left: 0;</div><div class="line">    margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="flexbox的解决方法"><a href="#flexbox的解决方法" class="headerlink" title="flexbox的解决方法"></a>flexbox的解决方法</h2><blockquote>
<p>前提不考虑浏览器的兼容性</p>
<p>父元素设置 display:flex; 子元素设置 margin:auto;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.md-warp&#123;</div><div class="line">  display:flex;</div><div class="line">&#125;</div><div class="line">.md-main&#123;</div><div class="line">  margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>flexbox 实现文字的垂直居中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.md-warp&#123;</div><div class="line">	display:flex;</div><div class="line">&#125;</div><div class="line">.md-main&#123;</div><div class="line">	display:flex;</div><div class="line">	align-items:center;</div><div class="line">	justify-content:center;</div><div class="line">	margin:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://louiszhai.github.io/2016/03/12/css-center/" target="_blank" rel="external">16种方法实现水平居中垂直居中</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;垂直水平居中方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绝对定位&lt;/li&gt;
&lt;li&gt;负外边距&lt;/li&gt;
&lt;li&gt;flexbox&lt;/li&gt;
&lt;li&gt;inline-block&lt;/li&gt;
&lt;li&gt;display:table-cell&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;浮
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>Arguments 与 Boolean 总结与示例</title>
    <link href="http://yoursite.com/2017/02/15/Arguments%20%E4%B8%8E%20Boolean/"/>
    <id>http://yoursite.com/2017/02/15/Arguments 与 Boolean/</id>
    <published>2017-02-15T02:45:02.999Z</published>
    <updated>2017-02-15T03:27:47.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h1><ul>
<li>这不是数组，是指参数，但拥有length的属性</li>
<li>使用Array.prototype.slice.call(index) 可以把参数列表转化为数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function arg(item)&#123;</div><div class="line">	console.log(item); // 只会去到第一个args</div><div class="line">	return [].slice.call(arguments,1); //把剩下的args 转化成数组</div><div class="line">&#125;</div><div class="line">arg(1,2,3,4,5,&quot;aa&quot;,&quot;bb&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>定义一个创建HTML列表的方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function list(type)&#123;</div><div class="line">	var result = &quot;&lt;&quot; + type + &quot;&gt;&lt;li&gt;&quot;;</div><div class="line">	var args = [].slice.call(arguments,1);</div><div class="line">	result += args.join(&quot;&lt;/li&gt;&lt;li&gt;&quot;);</div><div class="line">	result += &quot;&lt;/li&gt;&lt;&quot; + type + &quot;&gt;&quot;;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">list(&quot;ul&quot;,&quot;One&quot;,&quot;Two&quot;,&quot;Thr&quot;);</div><div class="line">//&quot;&lt;ul&gt;&lt;li&gt;One&lt;/li&gt;&lt;li&gt;Two&lt;/li&gt;&lt;li&gt;Thr&lt;/li&gt;&lt;/ul&gt;&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>应用：<br><a href="https://sammieho.github.io/2016/11/20/%E4%BB%8E%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8A%A0%E6%B7%B1%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E8%BF%90%E7%94%A8/" target="_blank" rel="external">柯里化</a></p>
<h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><ul>
<li><p>直接使用 Boolean(value) 函数// value 可选</p>
</li>
<li><p>参数是 0, -0,  null, false, NaN, undefined, 或者空字符串 (“”)：值为false.</p>
</li>
<li>其他任何值,包括任何对象或者字符串”false”：值为true.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Arguments&quot;&gt;&lt;a href=&quot;#Arguments&quot; class=&quot;headerlink&quot; title=&quot;Arguments&quot;&gt;&lt;/a&gt;Arguments&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;这不是数组，是指参数，但拥有length的属性&lt;/li&gt;
&lt;li&gt;使用A
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>String 总结与示例</title>
    <link href="http://yoursite.com/2017/02/15/String%E6%80%BB%E7%BB%93%E4%B8%8E%E7%A4%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/02/15/String总结与示例/</id>
    <published>2017-02-15T00:55:29.000Z</published>
    <updated>2017-02-15T01:56:25.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h4 id="string-length"><a href="#string-length" class="headerlink" title="string.length"></a>string.length</h4><ul>
<li><p>返回字符串的长度。</p>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var x = &quot;Mozilla&quot;;</div><div class="line">var empty = &quot;&quot;;</div><div class="line"></div><div class="line">console.log( x.length ); // 7</div><div class="line">console.log(empty.length); //0</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="String-prototype"><a href="#String-prototype" class="headerlink" title="String.prototype"></a>String.prototype</h4><ul>
<li><p>所有 String 实例都继承于 String.prototype。</p>
</li>
<li><p>String.prototype 属性的属性特性：<br>writable    :false<br>enumerable    :false<br>configurable    :false</p>
</li>
</ul>
<h1 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h1><blockquote>
<p>都不会改变原str<br> var str = “abcd”, newS;</p>
</blockquote>
<h4 id="跟-HTML-无关的方法"><a href="#跟-HTML-无关的方法" class="headerlink" title="跟 HTML 无关的方法"></a>跟 HTML 无关的方法</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">概述</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">charAt(index)</td>
<td style="text-align:left">返回指定索引的字符</td>
<td style="text-align:left">str.charAt(0); // a</td>
</tr>
<tr>
<td style="text-align:left">charCodeAt(index)</td>
<td style="text-align:left">返回指定索引的字符的Unicode编码，不存在/超出范围，返回NaN</td>
<td style="text-align:left">str.charCodeAt(0);  // 97 (a的ASCII是97)</td>
</tr>
<tr>
<td style="text-align:left">concat(str)</td>
<td style="text-align:left">将一/多个字符串与原字符串连接，返回新的字符串</td>
<td style="text-align:left">newS = str.charAt(“e”,”f”); //newS = “abcdef”; str = “abcd”</td>
</tr>
<tr>
<td style="text-align:left">includes(searchString)</td>
<td style="text-align:left">判断当前str是否包含searchString，返回T/F</td>
<td style="text-align:left">str.includes(“bc”); // true</td>
</tr>
<tr>
<td style="text-align:left">indexOf(searchVal)</td>
<td style="text-align:left">返回指定值的第一次出现的索引 / -1。</td>
<td style="text-align:left">str.indexOf(“bc”); // 1</td>
</tr>
<tr>
<td style="text-align:left">lastIndexOf(searchVal)</td>
<td style="text-align:left">(从末尾开始搜索) 返回指定值的第一次出现的索引 / -1。</td>
<td style="text-align:left">str.lastIndexOf(“”); // 2</td>
</tr>
<tr>
<td style="text-align:left">repeat(count)</td>
<td style="text-align:left">重复指定str，count次，返回新的字符串</td>
<td style="text-align:left">str.repeat(1) //abcdabcd</td>
</tr>
<tr>
<td style="text-align:left">slice(begin,end)</td>
<td style="text-align:left">提取部分str并返回</td>
<td style="text-align:left">str.slice(0,1) //a</td>
</tr>
<tr>
<td style="text-align:left">split(“separator”)</td>
<td style="text-align:left">将str按separator分割，并转化成arr</td>
<td style="text-align:left">str.split(“”) //[“a”,”b”,”c”,”d”];</td>
</tr>
<tr>
<td style="text-align:left">substr(strat,len)</td>
<td style="text-align:left">返回字符串中从指定位置开始到指定长度的子字符串。</td>
<td style="text-align:left">str.substr(0,2); //“ab”</td>
</tr>
<tr>
<td style="text-align:left">substring(start,end)</td>
<td style="text-align:left">返回字符串两个索引之间（或到字符串末尾）的子串。</td>
<td style="text-align:left">str.substring(1,2); //“b”</td>
</tr>
<tr>
<td style="text-align:left">toLowerCase()</td>
<td style="text-align:left">将str转换为小写并返回</td>
<td style="text-align:left">str.toLowerCase(); //“abcd”</td>
</tr>
<tr>
<td style="text-align:left">toUpperCase()</td>
<td style="text-align:left">将str转换为大写并返回</td>
<td style="text-align:left">str.toUpperCase(); //“ABCD”</td>
</tr>
<tr>
<td style="text-align:left">trim()</td>
<td style="text-align:left">删除str两端的空白字符(实际是replace)</td>
<td style="text-align:left">newS = “  a,cd  “; newS.trim(); // “a,cd”</td>
</tr>
<tr>
<td style="text-align:left">toString()</td>
<td style="text-align:left">返回字符串形式</td>
<td style="text-align:left">str = [1,2,3];str.toString(); // “1,2,3”</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="与-RegExp-相关"><a href="#与-RegExp-相关" class="headerlink" title="与 RegExp 相关"></a>与 RegExp 相关</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">概述</th>
<th style="text-align:center">返回值</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">str.match(regexp)</td>
<td style="text-align:left">字符串匹配到RegExp时，提取匹配项。</td>
<td style="text-align:center">包含匹配结果的array / null</td>
<td>str.match(/[a-z]/) // return [“a”]</td>
</tr>
<tr>
<td style="text-align:left">str.search(regexp)</td>
<td style="text-align:left">查找str与一个RegExp是否匹配</td>
<td style="text-align:center">返回首次匹配项的索引/ -1</td>
<td>str.search(/[a-z]/); // 0</td>
</tr>
<tr>
<td style="text-align:left">replace(regexp/substr,newStr/function)</td>
<td style="text-align:left">用arg2替换掉符合arg1的内容</td>
<td style="text-align:center">返回替换后的新字符串</td>
<td>str.replace(/[a-b]/g,”N”); //“NNcd”</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;h4 id=&quot;string-length&quot;&gt;&lt;a href=&quot;#string-length&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>简单算法——Array与String的运用</title>
    <link href="http://yoursite.com/2017/02/14/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94Array%E4%B8%8EString%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/14/简单算法——Array与String的运用/</id>
    <published>2017-02-14T10:57:33.754Z</published>
    <updated>2017-02-15T02:42:16.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h1><p><strong> 思路：</strong><br>先把string转换成array，再借助数组的reverse翻转数组顺序，最后再把array转化为string</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function reverseString(str)&#123;</div><div class="line">	return str.split(&quot;&quot;).reverse().join(&quot;&quot;);</div><div class="line">&#125;</div><div class="line">reverseString(&quot;I&apos;m beaty!&quot;);</div></pre></td></tr></table></figure>
<h1 id="计算一个整数的阶乘"><a href="#计算一个整数的阶乘" class="headerlink" title="计算一个整数的阶乘"></a>计算一个整数的阶乘</h1><p><strong> 思路：</strong></p>
<ol>
<li>递归</li>
<li>累乘</li>
</ol>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">1. 递归</div><div class="line">function factorialize(num)&#123;</div><div class="line">	if(num === 0)&#123;</div><div class="line">		return 1;</div><div class="line">	&#125;else if( num &gt; 0 )&#123;</div><div class="line">		return num*factorialize(num - 1);</div><div class="line">	&#125;else&#123;</div><div class="line">		alert(&quot;input right num.&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">factorialize(5); // 120</div><div class="line"></div><div class="line">2. 累乘</div><div class="line">function factorialize(num)&#123;</div><div class="line">	if( num === 0 )&#123;</div><div class="line">		return 1;</div><div class="line">	&#125;</div><div class="line">	for(var i = 1,multiply = 1; i &lt;= num; i++)&#123;</div><div class="line">		multiply *= i;</div><div class="line">	&#125;</div><div class="line">	return multiply;</div><div class="line">&#125;</div><div class="line">factorialize(5); // 120</div></pre></td></tr></table></figure>
<h1 id="回文检测"><a href="#回文检测" class="headerlink" title="回文检测"></a>回文检测</h1><p><strong> 规则：</strong><br>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p>
<p><strong> 思路：</strong><br>先去掉标点符号，转换小写；再讲正向str与翻转后的str对比。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function palindrome(str)&#123;</div><div class="line">	str = str.replace(/[\W\s_,]/g,&quot;&quot;).toLowerCase();</div><div class="line">	reverseStr = str.split(&quot;&quot;).reverse().join(&quot;&quot;);</div><div class="line">	if(str === reverseStr)&#123;</div><div class="line">		return &quot;true&quot;;</div><div class="line">	&#125;else&#123;</div><div class="line">		return &quot;false&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">palindrome(&quot;aabaa&quot;);</div></pre></td></tr></table></figure>
<h1 id="找到句子中最长的单词"><a href="#找到句子中最长的单词" class="headerlink" title="找到句子中最长的单词"></a>找到句子中最长的单词</h1><p><strong> 思路：</strong><br>先去掉标点符号；再将string转化为数组,判断每个元素的长度。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function findLongestWord(str)&#123;</div><div class="line">	str = str.replace(/[_,.:!]/g,&quot;&quot;).split(&quot; &quot;);</div><div class="line">	var len = 0;</div><div class="line">	for(var i = 0; i &lt; str.length; i++)&#123;</div><div class="line">		if(str[i].length &gt; len )&#123;</div><div class="line">			len = str[i].length;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return len;</div><div class="line">&#125;</div><div class="line">findLongestWord(&quot;The quick brown fox jumped over the lazy dogaaaa.&quot;);</div></pre></td></tr></table></figure>
<h1 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h1><p><strong> 思路：</strong><br>1将string全部小写后转化为数组，数组每一个元素的第一个子元素大写。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">1. 先全部字符转化为小写，再分割成数组，用map迭代数组，用replace替换数组每个元素的首字母</div><div class="line"></div><div class="line">function titleCase1(str)&#123;</div><div class="line">	return str.toLowerCase().split(&quot; &quot;).map(function(val)&#123;</div><div class="line">		return val.replace(val.charAt(0),val.charAt(0).toUpperCase());</div><div class="line">	&#125;).join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">2. for in 遍历</div><div class="line">function titleCase2(str)&#123;</div><div class="line">  str = str.toLowerCase().split(&quot; &quot;);</div><div class="line">  for(var val in str )&#123;</div><div class="line">    str[val] = str[val].replace(str[val].charAt(0),str[val].charAt(0).toUpperCase());</div><div class="line">  &#125;</div><div class="line">  return str.join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">3. 正则匹配每一个子字符串(\w 匹配字母或数字或下划线或汉字；\s 匹配任意非空白符)，对每个val进行替换</div><div class="line"></div><div class="line">function titleCase3(str)&#123;</div><div class="line">  return str.replace(/\w\S*/g,function(val)&#123;</div><div class="line">    return val.charAt(0).toUpperCase() + val.slice(1).toLowerCase();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">titleCase(&quot;I&apos;m a little tea pot.&quot;);</div></pre></td></tr></table></figure>
<h1 id="找出大数组中每个小数组的最大值"><a href="#找出大数组中每个小数组的最大值" class="headerlink" title="找出大数组中每个小数组的最大值"></a>找出大数组中每个小数组的最大值</h1><p><strong> 思路：</strong><br>给每个小数组排序，将每个小数组的第一元素串联，形成新数组。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function largestOfArr(arr)&#123;</div><div class="line">	var str = [];</div><div class="line">	for(var i = 0; i &lt; arr.length; i ++)&#123;</div><div class="line">		arr[i].sort(function(a,b)&#123;</div><div class="line">			return b-a;</div><div class="line">		&#125;);</div><div class="line">		str.push(arr[i][0]);</div><div class="line">	&#125;</div><div class="line">	return str;</div><div class="line">&#125;</div><div class="line">largestOfArr([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);</div></pre></td></tr></table></figure>
<h1 id="检查指定的字符串结尾"><a href="#检查指定的字符串结尾" class="headerlink" title="检查指定的字符串结尾"></a>检查指定的字符串结尾</h1><p><strong> 思路：</strong><br>检查一个字符串(str)是否以指定的字符串(target)结尾。<br>如果是，返回true;如果不是，返回false。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function confirmEnding(str,target)&#123;</div><div class="line">	if(str.slice( target.length*(-1)) === target)&#123;</div><div class="line">		return &quot;true&quot;;</div><div class="line">	&#125;else&#123;</div><div class="line">		return &quot;false&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="重复字符串"><a href="#重复字符串" class="headerlink" title="重复字符串"></a>重复字符串</h1><p><strong> 思路：</strong><br>重复制定的字符创 num 次，如果 num 为负则返回空字符创。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1. 初始想法</div><div class="line">function repeatStr(str,num)&#123;</div><div class="line">	var newStr = &quot;&quot;;</div><div class="line">	if( num === 0)&#123;</div><div class="line">		return &quot; &quot;;</div><div class="line">	&#125;</div><div class="line">	while(num &gt; 0)&#123;</div><div class="line">		newStr += str;</div><div class="line">		num--;</div><div class="line">	&#125;</div><div class="line">	return newStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">2. 用String.prototype.repeat()</div><div class="line">function repeatStr(str,num)&#123;</div><div class="line">	return str.repeat(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">repeatStr(&quot;aa,&quot;,3); //&quot;aa,aa,aa,&quot;</div></pre></td></tr></table></figure>
<h1 id="截断一个字符串"><a href="#截断一个字符串" class="headerlink" title="截断一个字符串"></a>截断一个字符串</h1><p><strong> 规则：</strong><br>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。</p>
<p>切记，插入到字符串尾部的三个点号也会计入字符串的长度。</p>
<p>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</p>
<p><strong> 思路：</strong></p>
<ol>
<li>对比字符串strLen与参数num；</li>
<li>strLen &gt; num ,截断str范围(0,num-3]，加”…”</li>
<li>strLen &lt;= 3,不截断，直接加“…”</li>
</ol>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function truncate(str, num) &#123;</div><div class="line">  // Clear out that junk in your trunk</div><div class="line">  if(  str.length &gt; num &amp;&amp; num &gt; 3)&#123;</div><div class="line">    str = str.substr(0, num - 3) + &quot;...&quot;;</div><div class="line">  &#125;else if( str.length &lt;= num)&#123;</div><div class="line">    str = str;</div><div class="line">  &#125;</div><div class="line">  else&#123;</div><div class="line">    str = str.slice(0, num ) + &quot;...&quot;;</div><div class="line">  &#125;</div><div class="line">  return str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="按制定size分割数组"><a href="#按制定size分割数组" class="headerlink" title="按制定size分割数组"></a>按制定size分割数组</h1><p><strong> 思路：</strong><br>把一个数组arr按照指定的数组大小size分割成若干个数组块。</p>
<p>Array.push();<br>Array.slice();</p>
<p>例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];</p>
<p>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function chunk(arr, size) &#123;</div><div class="line">  var newArr = [];</div><div class="line">  for( var i = 0; i &lt; arr.length; i += size)&#123;</div><div class="line">    newArr.push(arr.slice(i,i+size));</div><div class="line">  &#125;</div><div class="line">  return newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], 2);</div></pre></td></tr></table></figure>
<h1 id="返回被截断的元素"><a href="#返回被截断的元素" class="headerlink" title="返回被截断的元素"></a>返回被截断的元素</h1><p><strong> 规则：</strong><br>返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</p>
<p><strong> 实现：</strong><br>Array.splice()的应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function slasher(arr, howMany)&#123;</div><div class="line">	arr.splice(0, howMany);//返回被删除的元素组成的数组</div><div class="line">	return arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">slasher([1, 2, 3], 2);</div></pre></td></tr></table></figure>
<h1 id="删除数组中的所有假值"><a href="#删除数组中的所有假值" class="headerlink" title="删除数组中的所有假值"></a>删除数组中的所有假值</h1><p><strong> 思路：</strong><br>假值有false、null、0、””、undefined 和 NaN。<br>Boolean Objects<br>Array.filter()<br><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function bouncer(arr) &#123;</div><div class="line">  // Don&apos;t show a false ID to this bouncer.</div><div class="line">  var newArr = arr.filter(function(val)&#123;</div><div class="line">    var x = new Boolean(val);</div><div class="line">    if( x )&#123;</div><div class="line">      return val;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  return newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bouncer([7, &quot;ate&quot;, &quot;&quot;, false, 9]);</div></pre></td></tr></table></figure>
<h1 id="摧毁函数"><a href="#摧毁函数" class="headerlink" title="摧毁函数"></a>摧毁函数</h1><p><strong> 规则：</strong><br>第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</p>
<p><strong> 思路：</strong></p>
<ol>
<li>将除第一个参数意外的参数连接成数组comp；</li>
<li>过滤，当第一个参数的元素不存在于comp时，符合返回。</li>
</ol>
<p>Array.filter();<br>Arguments object</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">1. 初始做法</div><div class="line">function destroyer(arr) &#123;</div><div class="line">  // Remove all the values</div><div class="line">  var compareArgs = [].slice.call(arguments,1);</div><div class="line">  var newArr = arr.filter(function(val)&#123;</div><div class="line">  var len = compareArgs.length;</div><div class="line">     for(var i = 0;i &lt; len; i++)&#123;</div><div class="line">       if( val == compareArgs[i])&#123;</div><div class="line">           return false;</div><div class="line">       &#125;else if( val != compareArgs[i] &amp;&amp; i == len - 1 )&#123;</div><div class="line">         return val;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line">  return newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">2. 优化后</div><div class="line">function des(arr)&#123;</div><div class="line">  var comp = Array.prototype.slice.call(arguments,1);</div><div class="line">  return arr.filter(function(val)&#123;</div><div class="line">    if( comp.indexOf(val) &lt; 0 )&#123;</div><div class="line">      return val;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">des([1, 2, 3,5, 1, 2, 3], 2, 3);</div></pre></td></tr></table></figure>
<h1 id="找到指定的值在数组的位置"><a href="#找到指定的值在数组的位置" class="headerlink" title="找到指定的值在数组的位置"></a>找到指定的值在数组的位置</h1><p><strong> 思路：</strong><br>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">1. First</div><div class="line">function where(arr, num) &#123;</div><div class="line">  // Find my place in this sorted array.</div><div class="line"></div><div class="line">  arr.sort(function(a,b)&#123;</div><div class="line">    return a-b;</div><div class="line">  &#125;);</div><div class="line">  var i = 0;</div><div class="line">  while( arr[i] &lt; num)&#123;</div><div class="line">    i++;</div><div class="line">  &#125;</div><div class="line">  return i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">2. two</div><div class="line">function whe(arr, num)&#123;</div><div class="line">  arr.sort();</div><div class="line"></div><div class="line">  for(var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">    if( arr[i] &gt; num )&#123;</div><div class="line">      return i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return arr.length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">whe([70, 60], 80);</div></pre></td></tr></table></figure>
<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><p><strong> 思路：</strong><br>右移13位</p>
<p><strong> 实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function rot13(str) &#123; // LBH QVQ VG!</div><div class="line">   str = str.split(&quot;&quot;);</div><div class="line"></div><div class="line">  var newStr = str.reduce(function(preVal,curVal)&#123;</div><div class="line">    if( curVal.match(/[A-Z]/) !== null )&#123;</div><div class="line">      curVal = curVal.charCodeAt(0) + 13;</div><div class="line">       if( curVal &gt; 90 )&#123;</div><div class="line">          curVal -= 26;</div><div class="line">        &#125;</div><div class="line">        return preVal += String.fromCharCode(curVal);</div><div class="line">      &#125;</div><div class="line">      else&#123;</div><div class="line">        return preVal += curVal;</div><div class="line">      &#125;</div><div class="line">    &#125;,&quot;&quot;);</div><div class="line">  return newStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">rot13(&quot;SERR CVMMN!&quot;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻转字符串&quot;&gt;&lt;a href=&quot;#翻转字符串&quot; class=&quot;headerlink&quot; title=&quot;翻转字符串&quot;&gt;&lt;/a&gt;翻转字符串&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; 思路：&lt;/strong&gt;&lt;br&gt;先把string转换成array，再借助数组的reverse翻转数
    
    </summary>
    
      <category term="Array String Javascript" scheme="http://yoursite.com/categories/Array-String-Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Array 总结与示例</title>
    <link href="http://yoursite.com/2017/02/13/Array%E6%80%BB%E7%BB%93%E4%B8%8E%E7%A4%BA%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/02/13/Array总结与示例/</id>
    <published>2017-02-13T14:06:30.484Z</published>
    <updated>2017-02-14T00:21:15.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h4 id="array-length"><a href="#array-length" class="headerlink" title="array.length"></a>array.length</h4><ul>
<li><p>返回一个数组中的元素个数。</p>
</li>
<li><p>Array.length 属性的属性特性：<br>writable    :true<br>enumerable    :false<br>configurable    :false</p>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var items = [&quot;shoes&quot;, &quot;shirts&quot;, &quot;socks&quot;, &quot;sweaters&quot;];</div><div class="line"></div><div class="line">items.length;</div><div class="line"></div><div class="line">// 返回 4</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a>Array.prototype</h4><ul>
<li><p>所有的数组实例都继承于 Array.prototype。</p>
</li>
<li><p>Array.prototype 属性的属性特性：<br>writable    :false<br>enumerable    :false<br>configurable    :false</p>
</li>
<li><p>注意：Array.prototype 本身是个空数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.isArray(Array.prototype) //true</div></pre></td></tr></table></figure>
</li>
<li><p>所有的数组方法都是定义在Array.prototype上，通过扩展其属性的方法来给所有数组示例增加方法。(构造函数的方式)</p>
</li>
</ul>
<h1 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h1><h4 id="①-会改变自身"><a href="#①-会改变自身" class="headerlink" title="① 会改变自身"></a>① 会改变自身</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">概述</th>
<th style="text-align:center">返回值</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sort(compareFunction)</td>
<td style="text-align:left">排序</td>
<td style="text-align:center">新数组</td>
<td>array.sort(func);</td>
</tr>
<tr>
<td style="text-align:left">push(ele1,ele2,ele3)</td>
<td style="text-align:left">在末尾添加元素</td>
<td style="text-align:center">数组的新长度</td>
<td>let a = [1,2]; a.push(3,4) // return 4</td>
</tr>
<tr>
<td style="text-align:left">pop()</td>
<td style="text-align:left">删除末尾的元素</td>
<td style="text-align:center">返回该元素的值,会更改数组的长度</td>
<td>let a = [1,2,3]; a.pop();//return 3</td>
</tr>
<tr>
<td style="text-align:left">unshift(ele1,ele2,ele3)</td>
<td style="text-align:left">在头部添加元素</td>
<td style="text-align:center">数组的新长度</td>
<td>类似push()</td>
</tr>
<tr>
<td style="text-align:left">shift()</td>
<td style="text-align:left">在头部删除元素</td>
<td style="text-align:center">被删除元素的值</td>
<td>类似pop()</td>
</tr>
<tr>
<td style="text-align:left">reverse()</td>
<td style="text-align:left">翻转数组</td>
<td style="text-align:center">返回该数组的引用</td>
<td>array.reverse()</td>
</tr>
<tr>
<td style="text-align:left">splice(start, delCount, item1, …)</td>
<td style="text-align:left">添加/删除特定元素</td>
<td style="text-align:center">被删除元素组成的数组</td>
<td>a.splice(2,0,”aa”)</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="②-不会改变原数组"><a href="#②-不会改变原数组" class="headerlink" title="② 不会改变原数组"></a>② 不会改变原数组</h4><blockquote>
<p> var a = [“a”,”b”,”c”],newA;</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">概述</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">concat(arr1,arr2)</td>
<td style="text-align:left">连接</td>
<td style="text-align:left">a.concat(“d”); //[“a”,”b”,”c”,”d”]</td>
</tr>
<tr>
<td style="text-align:left">includes(num)</td>
<td style="text-align:left">判断当前数组是否包含某指定的值,返回true/false</td>
<td style="text-align:left">a.includes(“b”); //true</td>
</tr>
<tr>
<td style="text-align:left">indexOf(ele)</td>
<td style="text-align:left">返回数组中存在元素的第一个索引，没有则返回-1</td>
<td style="text-align:left">a.indexOf(“b”); //1</td>
</tr>
<tr>
<td style="text-align:left">lastIndexOf(ele)</td>
<td style="text-align:left">与indexOf类似，不过从末尾开始寻找</td>
<td style="text-align:left">a.lastIndexOf(“b”) // 1</td>
</tr>
<tr>
<td style="text-align:left">join(“,”)</td>
<td style="text-align:left">把数组按”,”连接成string</td>
<td style="text-align:left">newA = a.join(“-“); //return a-b-c</td>
</tr>
<tr>
<td style="text-align:left">slice(begin,end)</td>
<td style="text-align:left">部分浅拷贝, 返回到从开始到结束（半开半闭区间）选择的新数组对象</td>
<td style="text-align:left">newA = a.slice(1,2); // newA = [“b”];</td>
</tr>
<tr>
<td style="text-align:left">toString()</td>
<td style="text-align:left">返回一个字符串,由”,”连接</td>
<td style="text-align:left">newA = a.toString(); // “a,b,c”</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="③-遍历方法"><a href="#③-遍历方法" class="headerlink" title="③ 遍历方法"></a>③ 遍历方法</h4><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">概述</th>
<th style="text-align:left">callback</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">forEach()</td>
<td style="text-align:left">排序</td>
<td style="text-align:left">function(val){return val;}</td>
</tr>
<tr>
<td style="text-align:left">filter()</td>
<td style="text-align:left">过滤出符合条件的元素，callback的参数作为当前迭代的项，返回true的项保留，false过滤。</td>
<td style="text-align:left">function(val)</td>
</tr>
<tr>
<td style="text-align:left">map()</td>
<td style="text-align:left">根据callback来处理每个元素</td>
<td style="text-align:left">function(val)</td>
</tr>
<tr>
<td style="text-align:left">reduce(func,per(选))</td>
<td style="text-align:left">迭代数组，并累计到一个值中。callback是个累加器</td>
<td style="text-align:left">function(preVal,curVal)</td>
</tr>
<tr>
<td style="text-align:left">every(callback[, thisArg])</td>
<td style="text-align:left">每个元素都符合callback，返回T/F</td>
<td style="text-align:left">func(element, index, array)</td>
</tr>
<tr>
<td style="text-align:left">some()</td>
<td style="text-align:left">其中一个符合callback，返回T/F</td>
<td style="text-align:left">callback 被调用时传入三个参数：元素的值，元素的索引，被遍历的数组。</td>
</tr>
<tr>
<td style="text-align:left">find()</td>
<td style="text-align:left">返回数组中满足提供的测试函数的第一个元素的值,无则undefined</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">findIndex()</td>
<td style="text-align:left">返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;h4 id=&quot;array-length&quot;&gt;&lt;a href=&quot;#array-length&quot; class=&quot;headerlink&quot; title=&quot;a
    
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/categories/Array/"/>
    
    
  </entry>
  
  <entry>
    <title>区别 client,page,offset,screen</title>
    <link href="http://yoursite.com/2017/02/13/%E5%8C%BA%E5%88%AB%20client,page,offset,screen/"/>
    <id>http://yoursite.com/2017/02/13/区别 client,page,offset,screen/</id>
    <published>2017-02-13T02:31:20.115Z</published>
    <updated>2017-02-04T09:10:13.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="client-客户区坐标位置"><a href="#client-客户区坐标位置" class="headerlink" title="client 客户区坐标位置"></a>client 客户区坐标位置</h2><p>顾名思义，相对于 <strong> 浏览器内容区域 视口 </strong> 而言的clientX，clientY （不包含页面滚动的距离）</p>
<p>图示如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p1.bpimg.com/567571/243a402fbcdcef97.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="screen-屏幕坐标位置"><a href="#screen-屏幕坐标位置" class="headerlink" title="screen 屏幕坐标位置"></a>screen 屏幕坐标位置</h2><p>相对于 整个显示器的屏幕而言的 screenX，screenY</p>
<p>图示如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i1.piimg.com/567571/1f16c1ca560597ab.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="page，offset-页面坐标位置"><a href="#page，offset-页面坐标位置" class="headerlink" title="page，offset 页面坐标位置"></a>page，offset 页面坐标位置</h2><p>相对于整个网页，是算上滚动条的。</p>
<p>例如：<br>网页的 width：980px; height: 3000px;<br>那么 page 和 offset 的最大值就是 980 和 3000。</p>
<p>而 page 和 offset 的区别就是：IE8以下只支持offset。</p>
<p>图示如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://p1.bpimg.com/567571/ab9be4f683b83f9d.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>-《Javascript高程》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;client-客户区坐标位置&quot;&gt;&lt;a href=&quot;#client-客户区坐标位置&quot; class=&quot;headerlink&quot; title=&quot;client 客户区坐标位置&quot;&gt;&lt;/a&gt;client 客户区坐标位置&lt;/h2&gt;&lt;p&gt;顾名思义，相对于 &lt;strong&gt; 浏览器内
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件监听—addEventListener</title>
    <link href="http://yoursite.com/2017/02/13/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E2%80%94addEventListener/"/>
    <id>http://yoursite.com/2017/02/13/事件监听—addEventListener/</id>
    <published>2017-02-13T02:31:20.088Z</published>
    <updated>2017-02-03T13:58:36.002Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">elementObj.addEventListener(type,listener,useCapture);</div><div class="line"></div><div class="line">当监听对象触发指定的事件后，执行指定回调函数。</div></pre></td></tr></table></figure>
<p><strong>addEventListener相对于attachEvent优点：</strong></p>
<ul>
<li>一个事件可注册多个listener。</li>
<li>Listener的触发可以选择capture/bubbling。</li>
<li>对任何DOM元素都有效。</li>
</ul>
<blockquote>
<p> 在内存问题上，使用预先声明的函数，比匿名函数的消耗更小。</p>
</blockquote>
<p><strong>移除指定的事件：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">removeEventListener(event,function,capture/bubble);</div></pre></td></tr></table></figure>
<p><strong>event.target 在处理事件时会被用到，例如：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function hide(event)&#123;</div><div class="line">        var target = event.target || event.srcElement;//target兼容处理</div><div class="line">	event.target.style.display = &apos;none&apos;;</div><div class="line">&#125;</div><div class="line">obj.addEventListener(&apos;click&apos;,hide,false);</div></pre></td></tr></table></figure></p>
<p><strong>兼容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function addEvent(obj,type,func)&#123;</div><div class="line">	if(window.addEventListener)&#123;</div><div class="line">		obj.addEventListener(type,func,false);</div><div class="line">	&#125;</div><div class="line">	else&#123;</div><div class="line">		obj.addEventListener(&apos;on&apos;+type,func);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">or:</div><div class="line"></div><div class="line">function addEvent(obj,type,listener)&#123;</div><div class="line">	obj.addEventListener? obj.addEventListener(type,func,false) : obj.addEventListener(&apos;on&apos;+type,func);</div><div class="line">	return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax 的 深入学习</title>
    <link href="http://yoursite.com/2017/02/13/ajax%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/02/13/ajax深入学习/</id>
    <published>2017-02-13T02:31:19.767Z</published>
    <updated>2017-02-13T02:33:41.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax-起步"><a href="#Ajax-起步" class="headerlink" title="Ajax 起步"></a>Ajax 起步</h2><ol>
<li><p>创建一个新的XMLHttpRequest 对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var httpRequest = new XMLHttpRequest();</div></pre></td></tr></table></figure>
</li>
<li><p>给 readystatechange 事件设置一个事件处理器handlerResponse</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.onreadystatechange = handlerResponse;</div></pre></td></tr></table></figure>
<blockquote>
<p>然后，告诉 XMLHttpRequest 对象你想要做什么：</p>
</blockquote>
</li>
<li><p>使用 open 方法来指定 HTTP 方法和需要请求的URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.open( &quot;get&quot;, e.target.innerHTML + &quot;.html&quot; );</div></pre></td></tr></table></figure>
</li>
<li><p>调用send() 方法，向服务器发送数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.send();</div></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="HTTP-方法："><a href="#HTTP-方法：" class="headerlink" title="HTTP 方法："></a>HTTP 方法：</h6><ul>
<li>GET：适合安全的交互行为，那些可以反复发起而不会带来副作用的请求。</li>
<li>POST：适合不安全的交互行为，每一个请求都会导致服务器端发生变化，而重复的请求可能会带来问题。</li>
</ul>
<h2 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h2><p>一旦脚本调用了send方法，浏览器在后台发送请求到服务器，而 Ajax 依靠时间来通知请求的进展。</p>
<p>此处用 handlerResponse 来处理这些事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function handlerResponse(e)&#123;</div><div class="line">	if( e.target.reayState == XMLHttpRequest.DONE &amp;&amp; e.target.status == 200)&#123;</div><div class="line">		document.getElementById(&quot;target&quot;).innerHTML = e.target.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DONE状态并不意味着请求成功，只代表请求已完成。<br>通过status属性获得HTTP状态码，会返回一个数值（例如200表示成功）。<br>只有结合 <strong> readyState 和 status</strong> 属性的值才能够<strong> 确定请求的结果</strong>。<br><strong>用 XMLHttpRequest.responseText 属性获得服务器发送的数据。</strong></p>
<h4 id="XMLHttpRequest-readyState-属性的值"><a href="#XMLHttpRequest-readyState-属性的值" class="headerlink" title="XMLHttpRequest readyState 属性的值"></a>XMLHttpRequest readyState 属性的值</h4><table>
<thead>
<tr>
<th>值</th>
<th>数值</th>
<th>状态说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSENT</td>
<td>0</td>
<td>已创建XMLHttpRequest对象，请求未初始化，open未调用；</td>
</tr>
<tr>
<td>OPENED</td>
<td>1</td>
<td>Server链接已建立，open已调用；</td>
</tr>
<tr>
<td>HEADERS_RECEIVED</td>
<td>2</td>
<td>已收到服务器响应的标头</td>
</tr>
<tr>
<td>LOADING</td>
<td>3</td>
<td>请求处理中，已收到服务器响应</td>
</tr>
<tr>
<td>DONE</td>
<td>4</td>
<td>响应完成或已失败。</td>
</tr>
</tbody>
</table>
<h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx：</td>
<td>信息类。表示接受到浏览器请求，进一步处理。</td>
</tr>
<tr>
<td>2xx：</td>
<td>成功。请求被正确接收，理解和处理。</td>
</tr>
<tr>
<td>3xx：</td>
<td>重定向。请求失败，客户采取进一步操作。</td>
</tr>
<tr>
<td>4xx：</td>
<td>客户端错误。</td>
</tr>
<tr>
<td>5xx：</td>
<td>服务器错误。服务器不能完成请求。</td>
</tr>
</tbody>
</table>
<h4 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h4><pre><code>// 用户点击一个按钮，
// 浏览器在后台向服务器请求一个文档，
// 当它到达时处理一个事件，并显示被请求文档的内容。
var btn = document.getElementsByTagName(&apos;button&apos;);
var tar = document.getElementById(&quot;target&quot;);

for(let i = 0; i &lt; btn.length; i++){
    btn[i].onclick = handlerBtnPress;
}

function handlerBtnPress(e){

    var httpRequest = new XMLHttpRequest();
    httpRequest.open( &quot;GET&quot;, e.target.innerHTML + &quot;.html&quot;);
    httpRequest.onreadystatechange = handlerResponse;
    httpRequest.send();
}

function handlerResponse(e){
    if(e.target.readyState === 4 &amp;&amp; e.target.status === 200){
        tar.innerHTML = e.target.responseText;
    }
}
</code></pre><h3 id="兼容-Opera"><a href="#兼容-Opera" class="headerlink" title="兼容 Opera"></a>兼容 Opera</h3><blockquote>
<pre><code>Queation 1：
Opera 在出发readystatechange事件时不会生成一个Event对象。

Resolve：
把XMLHttpRequest对象指派给一个全局变量。
</code></pre></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var httpRequest;</div><div class="line"></div><div class="line">function handlerBtnPress(e)&#123;</div><div class="line"></div><div class="line">	httpRequest = new XMLHttpRequest();</div><div class="line">	httpRequest.open( &quot;GET&quot;, e.target.innerHTML + &quot;.html&quot;);</div><div class="line">	httpRequest.onreadystatechange = handlerResponse;</div><div class="line">	httpRequest.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function handlerResponse(e)&#123;</div><div class="line">	if(httpRequest.readyState === 4 &amp;&amp; httpRequest.status === 200)&#123;</div><div class="line">		tar.innerHTML = httpRequest.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-Ajax-事件"><a href="#使用-Ajax-事件" class="headerlink" title="使用 Ajax 事件"></a>使用 Ajax 事件</h2><h4 id="XMLHttpRequest-对象定义的事件"><a href="#XMLHttpRequest-对象定义的事件" class="headerlink" title="XMLHttpRequest 对象定义的事件"></a>XMLHttpRequest 对象定义的事件</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>事件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>abort</td>
<td>在请求被终止时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>error</td>
<td>在请求是被时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>load</td>
<td>请求成功完成时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadend</td>
<td>请求已完成时触发，无论成功还是发生错误</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadstart</td>
<td>请求开始时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>progress</td>
<td>触发以提示请求的进度</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>readystatechange</td>
<td>在请求生命周期的不同阶段触发</td>
<td>Event</td>
</tr>
<tr>
<td>timeout</td>
<td>请求超时则触发</td>
<td>ProgressEvent</td>
</tr>
</tbody>
</table>
<p>####ProgressEvent 定义的额外属性</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>事件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>lengthComputable</td>
<td>如果能够计算数据流的总长度则返回true</td>
<td>boolean</td>
</tr>
<tr>
<td>loaded</td>
<td>返回当前已载入的数据量</td>
<td>number</td>
</tr>
<tr>
<td>total</td>
<td>返回可用的数据总量</td>
<td>number</td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用XMLHttpRequest定义的一次性事件</p>
</blockquote>
<p>这是之前示例的一种变量，为一些事件注册了处理函数，并在一个table内为处理的时间创建了记录，以看清楚浏览器是如何处罚这些事件的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">var</span> tar = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line"><span class="keyword">var</span> eve = <span class="built_in">document</span>.getElementById(<span class="string">"eve"</span>);</div><div class="line"><span class="keyword">var</span> httpRequest;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btn.length; i++)&#123;</div><div class="line">	btn[i].onclick = handlerBtnPress;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerBtnPress</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">	clearEveDetails();</div><div class="line"></div><div class="line">	httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">	httpRequest.onreadystatechange = handlerResponse;</div><div class="line">	httpRequest.onerror = handlerError;</div><div class="line">	httpRequest.onload = handlerLoad;</div><div class="line">	httpRequest.onloadstart = handlerLoadstart;</div><div class="line">	httpRequest.onloadend = handlerLoadend;</div><div class="line">	httpRequest.onprogress = handlerProgress;</div><div class="line"></div><div class="line">	httpRequest.open( <span class="string">"GET"</span>, e.target.innerHTML + <span class="string">".html"</span>);</div><div class="line">	httpRequest.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerResponse</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	displayEveDetails(<span class="string">"readystate("</span> + httpRequest.readyState + <span class="string">")"</span>);</div><div class="line">	<span class="keyword">if</span>(httpRequest.readyState === <span class="number">4</span> &amp;&amp; httpRequest.status === <span class="number">200</span>)&#123;</div><div class="line">		tar.innerHTML = httpRequest.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerError</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"error"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoad</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"load"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoadstart</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"loadstart"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoadend</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"loadend"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerProgress</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"progress"</span>,e); &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearEveDetails</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	eve.innerHTML = <span class="string">"&lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;lengthComputable&lt;/th&gt;&lt;th&gt;loaded&lt;/th&gt;&lt;th&gt;total&lt;/th&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayEveDetails</span>(<span class="params">eventName,e</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(e)&#123;</div><div class="line">		eve.innerHTML +=</div><div class="line">		<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + eventName + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.lengthComputable + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.loaded + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.total + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		eve.innerHTML +=</div><div class="line">		<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + eventName + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成-Ajax-跨域请求"><a href="#生成-Ajax-跨域请求" class="headerlink" title="生成 Ajax 跨域请求"></a>生成 Ajax 跨域请求</h2><p>浏览器为防止跨站脚本攻击，采用的同源策略，即 协议、主机名、端口号一致。</p>
<p>####CORS 跨源资源共享 Cross-origin-resource-sharing<br>通过添加跨源表头 Access-Control-Allow-Origin，指定某个来源必须被允许对此文档生成跨域请求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax-起步&quot;&gt;&lt;a href=&quot;#Ajax-起步&quot; class=&quot;headerlink&quot; title=&quot;Ajax 起步&quot;&gt;&lt;/a&gt;Ajax 起步&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个新的XMLHttpRequest 对象&lt;/p&gt;
&lt;figure class
    
    </summary>
    
      <category term="Ajax javascript" scheme="http://yoursite.com/categories/Ajax-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JSON发送数据</title>
    <link href="http://yoursite.com/2017/02/05/JSON%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/02/05/JSON发送数据/</id>
    <published>2017-02-05T06:27:25.937Z</published>
    <updated>2017-02-05T08:27:16.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-对象表示法"><a href="#JavaScript-对象表示法" class="headerlink" title="JavaScript 对象表示法"></a>JavaScript 对象表示法</h2><blockquote>
<p>“键名”:”值”</p>
</blockquote>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;banner&quot;: &quot;2&quot;,</div><div class="line">	&quot;apples&quot;: &quot;3&quot;,</div><div class="line">	&quot;cherries&quot; &quot;20&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-对象表示法&quot;&gt;&lt;a href=&quot;#JavaScript-对象表示法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 对象表示法&quot;&gt;&lt;/a&gt;JavaScript 对象表示法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ajax 的 深入学习</title>
    <link href="http://yoursite.com/2017/02/05/ajaxNote/"/>
    <id>http://yoursite.com/2017/02/05/ajaxNote/</id>
    <published>2017-02-05T03:04:15.030Z</published>
    <updated>2017-02-14T00:21:27.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax-起步"><a href="#Ajax-起步" class="headerlink" title="Ajax 起步"></a>Ajax 起步</h2><ol>
<li><p>创建一个新的XMLHttpRequest 对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var httpRequest = new XMLHttpRequest();</div></pre></td></tr></table></figure>
</li>
<li><p>给 readystatechange 事件设置一个事件处理器handlerResponse</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.onreadystatechange = handlerResponse;</div></pre></td></tr></table></figure>
<blockquote>
<p>然后，告诉 XMLHttpRequest 对象你想要做什么：</p>
</blockquote>
</li>
<li><p>使用 open 方法来指定 HTTP 方法和需要请求的URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.open( &quot;get&quot;, e.target.innerHTML + &quot;.html&quot; );</div></pre></td></tr></table></figure>
</li>
<li><p>调用send() 方法，向服务器发送数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpRequest.send();</div></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="HTTP-方法："><a href="#HTTP-方法：" class="headerlink" title="HTTP 方法："></a>HTTP 方法：</h6><ul>
<li>GET：适合安全的交互行为，那些可以反复发起而不会带来副作用的请求。</li>
<li>POST：适合不安全的交互行为，每一个请求都会导致服务器端发生变化，而重复的请求可能会带来问题。</li>
</ul>
<h2 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h2><p>一旦脚本调用了send方法，浏览器在后台发送请求到服务器，而 Ajax 依靠时间来通知请求的进展。</p>
<p>此处用 handlerResponse 来处理这些事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function handlerResponse(e)&#123;</div><div class="line">	if( e.target.reayState == XMLHttpRequest.DONE &amp;&amp; e.target.status == 200)&#123;</div><div class="line">		document.getElementById(&quot;target&quot;).innerHTML = e.target.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DONE状态并不意味着请求成功，只代表请求已完成。<br>通过status属性获得HTTP状态码，会返回一个数值（例如200表示成功）。<br>只有结合 <strong> readyState 和 status</strong> 属性的值才能够<strong> 确定请求的结果</strong>。<br><strong>用 XMLHttpRequest.responseText 属性获得服务器发送的数据。</strong></p>
<h4 id="XMLHttpRequest-readyState-属性的值"><a href="#XMLHttpRequest-readyState-属性的值" class="headerlink" title="XMLHttpRequest readyState 属性的值"></a>XMLHttpRequest readyState 属性的值</h4><table>
<thead>
<tr>
<th>值</th>
<th>数值</th>
<th>状态说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSENT</td>
<td>0</td>
<td>已创建XMLHttpRequest对象，请求未初始化，open未调用；</td>
</tr>
<tr>
<td>OPENED</td>
<td>1</td>
<td>Server链接已建立，open已调用；</td>
</tr>
<tr>
<td>HEADERS_RECEIVED</td>
<td>2</td>
<td>已收到服务器响应的标头</td>
</tr>
<tr>
<td>LOADING</td>
<td>3</td>
<td>请求处理中，已收到服务器响应</td>
</tr>
<tr>
<td>DONE</td>
<td>4</td>
<td>响应完成或已失败。</td>
</tr>
</tbody>
</table>
<h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx：</td>
<td>信息类。表示接受到浏览器请求，进一步处理。</td>
</tr>
<tr>
<td>2xx：</td>
<td>成功。请求被正确接收，理解和处理。</td>
</tr>
<tr>
<td>3xx：</td>
<td>重定向。请求失败，客户采取进一步操作。</td>
</tr>
<tr>
<td>4xx：</td>
<td>客户端错误。</td>
</tr>
<tr>
<td>5xx：</td>
<td>服务器错误。服务器不能完成请求。</td>
</tr>
</tbody>
</table>
<h4 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h4><pre><code>// 用户点击一个按钮，
// 浏览器在后台向服务器请求一个文档，
// 当它到达时处理一个事件，并显示被请求文档的内容。
var btn = document.getElementsByTagName(&apos;button&apos;);
var tar = document.getElementById(&quot;target&quot;);

for(let i = 0; i &lt; btn.length; i++){
    btn[i].onclick = handlerBtnPress;
}

function handlerBtnPress(e){

    var httpRequest = new XMLHttpRequest();
    httpRequest.open( &quot;GET&quot;, e.target.innerHTML + &quot;.html&quot;);
    httpRequest.onreadystatechange = handlerResponse;
    httpRequest.send();
}

function handlerResponse(e){
    if(e.target.readyState === 4 &amp;&amp; e.target.status === 200){
        tar.innerHTML = e.target.responseText;
    }
}
</code></pre><h3 id="兼容-Opera"><a href="#兼容-Opera" class="headerlink" title="兼容 Opera"></a>兼容 Opera</h3><blockquote>
<pre><code>Queation 1：
Opera 在出发readystatechange事件时不会生成一个Event对象。

Resolve：
把XMLHttpRequest对象指派给一个全局变量。
</code></pre></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var httpRequest;</div><div class="line"></div><div class="line">function handlerBtnPress(e)&#123;</div><div class="line"></div><div class="line">	httpRequest = new XMLHttpRequest();</div><div class="line">	httpRequest.open( &quot;GET&quot;, e.target.innerHTML + &quot;.html&quot;);</div><div class="line">	httpRequest.onreadystatechange = handlerResponse;</div><div class="line">	httpRequest.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function handlerResponse(e)&#123;</div><div class="line">	if(httpRequest.readyState === 4 &amp;&amp; httpRequest.status === 200)&#123;</div><div class="line">		tar.innerHTML = httpRequest.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用-Ajax-事件"><a href="#使用-Ajax-事件" class="headerlink" title="使用 Ajax 事件"></a>使用 Ajax 事件</h2><h4 id="XMLHttpRequest-对象定义的事件"><a href="#XMLHttpRequest-对象定义的事件" class="headerlink" title="XMLHttpRequest 对象定义的事件"></a>XMLHttpRequest 对象定义的事件</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>事件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>abort</td>
<td>在请求被终止时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>error</td>
<td>在请求是被时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>load</td>
<td>请求成功完成时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadend</td>
<td>请求已完成时触发，无论成功还是发生错误</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>loadstart</td>
<td>请求开始时触发</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>progress</td>
<td>触发以提示请求的进度</td>
<td>ProgressEvent</td>
</tr>
<tr>
<td>readystatechange</td>
<td>在请求生命周期的不同阶段触发</td>
<td>Event</td>
</tr>
<tr>
<td>timeout</td>
<td>请求超时则触发</td>
<td>ProgressEvent</td>
</tr>
</tbody>
</table>
<p>####ProgressEvent 定义的额外属性</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>事件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>lengthComputable</td>
<td>如果能够计算数据流的总长度则返回true</td>
<td>boolean</td>
</tr>
<tr>
<td>loaded</td>
<td>返回当前已载入的数据量</td>
<td>number</td>
</tr>
<tr>
<td>total</td>
<td>返回可用的数据总量</td>
<td>number</td>
</tr>
</tbody>
</table>
<blockquote>
<p>使用XMLHttpRequest定义的一次性事件</p>
</blockquote>
<p>这是之前示例的一种变量，为一些事件注册了处理函数，并在一个table内为处理的时间创建了记录，以看清楚浏览器是如何处罚这些事件的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">var</span> tar = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line"><span class="keyword">var</span> eve = <span class="built_in">document</span>.getElementById(<span class="string">"eve"</span>);</div><div class="line"><span class="keyword">var</span> httpRequest;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btn.length; i++)&#123;</div><div class="line">	btn[i].onclick = handlerBtnPress;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerBtnPress</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"></div><div class="line">	clearEveDetails();</div><div class="line"></div><div class="line">	httpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">	httpRequest.onreadystatechange = handlerResponse;</div><div class="line">	httpRequest.onerror = handlerError;</div><div class="line">	httpRequest.onload = handlerLoad;</div><div class="line">	httpRequest.onloadstart = handlerLoadstart;</div><div class="line">	httpRequest.onloadend = handlerLoadend;</div><div class="line">	httpRequest.onprogress = handlerProgress;</div><div class="line"></div><div class="line">	httpRequest.open( <span class="string">"GET"</span>, e.target.innerHTML + <span class="string">".html"</span>);</div><div class="line">	httpRequest.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerResponse</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	displayEveDetails(<span class="string">"readystate("</span> + httpRequest.readyState + <span class="string">")"</span>);</div><div class="line">	<span class="keyword">if</span>(httpRequest.readyState === <span class="number">4</span> &amp;&amp; httpRequest.status === <span class="number">200</span>)&#123;</div><div class="line">		tar.innerHTML = httpRequest.responseText;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerError</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"error"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoad</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"load"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoadstart</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"loadstart"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerLoadend</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"loadend"</span>,e); &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerProgress</span>(<span class="params">e</span>)</span>&#123; displayEveDetails(<span class="string">"progress"</span>,e); &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearEveDetails</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	eve.innerHTML = <span class="string">"&lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;lengthComputable&lt;/th&gt;&lt;th&gt;loaded&lt;/th&gt;&lt;th&gt;total&lt;/th&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayEveDetails</span>(<span class="params">eventName,e</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(e)&#123;</div><div class="line">		eve.innerHTML +=</div><div class="line">		<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + eventName + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.lengthComputable + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.loaded + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + e.total + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		eve.innerHTML +=</div><div class="line">		<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + eventName + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span> + <span class="string">"NAN"</span> + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成-Ajax-跨域请求"><a href="#生成-Ajax-跨域请求" class="headerlink" title="生成 Ajax 跨域请求"></a>生成 Ajax 跨域请求</h2><p>浏览器为防止跨站脚本攻击，采用的同源策略，即 协议、主机名、端口号一致。</p>
<p>####CORS 跨源资源共享 Cross-origin-resource-sharing<br>通过添加跨源表头 Access-Control-Allow-Origin，指定某个来源必须被允许对此文档生成跨域请求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax-起步&quot;&gt;&lt;a href=&quot;#Ajax-起步&quot; class=&quot;headerlink&quot; title=&quot;Ajax 起步&quot;&gt;&lt;/a&gt;Ajax 起步&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个新的XMLHttpRequest 对象&lt;/p&gt;
&lt;figure class
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
  </entry>
  
  <entry>
    <title>一道关于this和作用域的题目引发的思考</title>
    <link href="http://yoursite.com/2017/01/23/%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8Ethis%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/01/23/一道关于this和作用域的题目引发的思考/</id>
    <published>2017-01-23T00:55:29.000Z</published>
    <updated>2017-02-03T14:03:08.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目引发思考："><a href="#题目引发思考：" class="headerlink" title="题目引发思考："></a>题目引发思考：</h3><blockquote>
<p>一天在freecodecamp的群里，讨论到this的问题，最后有一道这样的题目:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> A = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'obj'</span>,</div><div class="line">	<span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> name = <span class="string">'gaga'</span>;</div><div class="line">		<span class="keyword">this</span>.name = <span class="string">'dose'</span>;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(name);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> B = A.test;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( A.test()() );</div><div class="line"><span class="built_in">console</span>.log( B()() );</div></pre></td></tr></table></figure>
<p>我的初始答案是这样：<br><em>gaga,dose</em><br><em>gaga,global</em><br>然而是错的…/(ㄒoㄒ)/~~</p>
<blockquote>
<p>我百思不得其解，为什么会这样呢？再想了一遍，思维很混乱，开始怀疑人生（抖腿）。</p>
</blockquote>
<p>第二天起来，脑海一直浮现一句话：<br><strong> this 是在函数调用时才指定的！</strong><br><strong> this 是在函数调用时才指定的！</strong><br><strong> this 是在函数调用时才指定的！</strong></p>
<h3 id="尝试："><a href="#尝试：" class="headerlink" title="尝试："></a>尝试：</h3><p>**为了理清思路，找到 this 的指向，我做了一些尝试：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i1.piimg.com/567571/b8446ab5316bdfc1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">** 最后得出：**</div><div class="line">A.test() 实际上调用了 foo() , this 的隐式绑定，指向 A 内部。所以 this.name = &quot;dose&quot; 是给 A.name 赋值。</div><div class="line">A.test()() 返回匿名函数，默认指向全局，此时 this.name 就是 window.name，输出 &quot;global&quot;。</div><div class="line"></div><div class="line">B() 实际等于全局的 foo()，此时 foo 内的 this 指向 window ，this.name 等于给 window.name 赋值，所以 B()()返回 &quot;dose&quot;</div></pre></td></tr></table></figure>
<h2 id="借此题重温this的机制："><a href="#借此题重温this的机制：" class="headerlink" title="借此题重温this的机制："></a>借此题重温this的机制：</h2><blockquote>
<p>this是在运行时进行绑定的，他的绑定与函数声明的位置没有关系，只取决于函数的调用方式。</p>
<p>当一个函数被调用时，会创建一个活动对象（执行上下文），这个记录会包含函数在哪里被调用、函数的调用方式、传入的参数等信息，this就是这个记录的一个属性，会在函数执行过程中用到。</p>
</blockquote>
<h2 id="this的绑定规则："><a href="#this的绑定规则：" class="headerlink" title="this的绑定规则："></a>this的绑定规则：</h2><ul>
<li>new</li>
<li>显示绑定</li>
<li>隐式绑定</li>
<li>默认绑定</li>
</ul>
<h2 id="this的好："><a href="#this的好：" class="headerlink" title="this的好："></a>this的好：</h2><p>可以在不同的上下文对象中重复使用函数，不用针对每个对象编写不同版本的函数。</p>
<p><strong> 举个栗子：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> greet = <span class="string">"Hello,"</span> + identify.call( <span class="keyword">this</span> );</div><div class="line">    <span class="built_in">console</span>.log( greet );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Kyle"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> you =&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Read"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( identify.call( me ) );</div><div class="line"><span class="built_in">console</span>.log( identify.call( you ) );</div><div class="line"></div><div class="line">speak.call( me );</div><div class="line">speak.call( you );</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Conclusion:</strong><br>函数可以自动引用合适的上下文。<br>this 提供了一种更优雅的方式来隐式“传递”一个对象饮用，因此可以将API设计得更加简洁和易于复用。</p>
</blockquote>
<h1 id="最后谨记！"><a href="#最后谨记！" class="headerlink" title="最后谨记！"></a>最后谨记！</h1><ul>
<li><h4 id="this是在函数调用时才指定的。"><a href="#this是在函数调用时才指定的。" class="headerlink" title="this是在函数调用时才指定的。"></a>this是在函数调用时才指定的。</h4></li>
<li><h4 id="作用域是在写函数的时候已经确定了。"><a href="#作用域是在写函数的时候已经确定了。" class="headerlink" title="作用域是在写函数的时候已经确定了。"></a>作用域是在写函数的时候已经确定了。</h4></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目引发思考：&quot;&gt;&lt;a href=&quot;#题目引发思考：&quot; class=&quot;headerlink&quot; title=&quot;题目引发思考：&quot;&gt;&lt;/a&gt;题目引发思考：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一天在freecodecamp的群里，讨论到this的问题，最后有一道这样
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>从柯里化函数，加深对递归的运用</title>
    <link href="http://yoursite.com/2016/11/20/%E4%BB%8E%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8A%A0%E6%B7%B1%E5%AF%B9%E9%80%92%E5%BD%92%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2016/11/20/从柯里化函数，加深对递归的运用/</id>
    <published>2016-11-20T00:55:29.000Z</published>
    <updated>2017-02-03T14:01:22.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>遇到过这么一道面试题</strong></p>
<blockquote>
<p>写出函数，实现 sum(2)(3) , sum(2,3)</p>
</blockquote>
<p>当时我是这么写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function sum(a)&#123;</div><div class="line">	if(arguments.length == 2)&#123;</div><div class="line">		return arguments[0] + arguments[1];</div><div class="line">	&#125;</div><div class="line">	else&#123;</div><div class="line">		return function (b)&#123;</div><div class="line">			return a + b;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我就想不会这么简单吧吧吧吧吧吧吧！！应该是要写n个参数，或者回调的情况下的通用函数，最后，我就画画画，没写出来，还搞到答卷“花面猫”似的。</p>
<p>回来，我搜索了一下，涉及到curry，柯里化函数。我懵逼了，这素啥。原来是递归的原理，分次接收参数。嗯，我要的就是这效果。</p>
<p><strong>下面是实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function curry(fn,curryArgs)&#123;</div><div class="line"></div><div class="line">	return function()&#123;</div><div class="line"></div><div class="line">		var args = Array.prototype.slice.call(arguments,0);</div><div class="line">               // 首次调用时未提供最后一个参数</div><div class="line">		if(curryArgs !== undefined)&#123;</div><div class="line">			args = args.concat(curryArgs);</div><div class="line">		&#125;</div><div class="line">                // 递归边界</div><div class="line">		if( !arguments.length )&#123;</div><div class="line">			return fn.apply(null, args);</div><div class="line">		&#125;</div><div class="line">		else&#123;</div><div class="line">			return curry(fn, args);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sumOf()&#123;</div><div class="line"></div><div class="line">	var total = 0;</div><div class="line"></div><div class="line">	for(var i=0; i&lt;arguments.length; i++)&#123;</div><div class="line">		total += arguments[i];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return total;</div><div class="line">&#125;</div><div class="line">// 改造普通函数，返回柯里函数</div><div class="line">var sum = curry(sumOf);</div><div class="line"></div><div class="line">sum(2, 3)(1)(1)(1, 2, 3)();</div></pre></td></tr></table></figure>
<p><strong>另一个方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function add() &#123;</div><div class="line">	var total = 0;</div><div class="line"></div><div class="line">	if (arguments.length) &#123;</div><div class="line"></div><div class="line">		var arr1 = Array.prototype.slice.call(arguments);</div><div class="line">		var mytotal = arrayAdder(arr1);</div><div class="line">		return sum(mytotal);</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">		return sum();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function sum() &#123;</div><div class="line">		if (arguments.length) &#123;</div><div class="line">			var arr = Array.prototype.slice.call(arguments);</div><div class="line">			total = total + arrayAdder(arr);</div><div class="line">			return sum;</div><div class="line">		&#125; else &#123;</div><div class="line">			return total;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function arrayAdder(arr) &#123;</div><div class="line">		var x = 0;</div><div class="line">		for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">			x = x + arr[i];</div><div class="line">		&#125;;</div><div class="line">		return x;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">add(2, 3)(1)(1)(1, 2, 3)();</div></pre></td></tr></table></figure></p>
<p>最后一点！很重要！<br>上面的解决方法是我参考了别人的文章/回答，总结下来的，若涉及到版权问题，请联系我删除，抱歉。<br>目前，未能深入理解柯里化函数，我会在接下来继续思考。</p>
<h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul>
<li><a href="http://ewind.us/2016/sum-to-curry/" target="_blank" rel="external">从 sum(2)(3) == sum(2, 3) 到实现柯里化函数</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" target="_blank" rel="external">JS中的柯里化(currying)</a></li>
<li><a href="http://web.jobbole.com/84171/" target="_blank" rel="external">JavaScript的柯里化函数</a></li>
<li><a href="http://www.cnblogs.com/zztt/p/4142891.html" target="_blank" rel="external">浅析 JavaScript 中的 函数 currying 柯里化</a></li>
<li><a href="https://segmentfault.com/a/1190000003733107" target="_blank" rel="external">js 函数式编程之函数柯里化</a></li>
<li>另外一个方法式在stackflow 找到的回答。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;遇到过这么一道面试题&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写出函数，实现 sum(2)(3) , sum(2,3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当时我是这么写的：&lt;br&gt;&lt;figure class=&quot;highlight p
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2016/11/11/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/11/11/快速排序/</id>
    <published>2016-11-11T00:55:29.000Z</published>
    <updated>2017-02-03T14:00:13.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>选一基准元素 point</li>
<li>分区操作(partition)：小于point放左边，大于point放右边，point最后的位置就是排序完成的位置。</li>
<li>重复步骤1.2<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">function quickSort(array) &#123;</div><div class="line"></div><div class="line">	//交换元素位置</div><div class="line">	function swap(arr, i, k) &#123;</div><div class="line">		var temp = arr[i];</div><div class="line">		arr[i] = arr[k];</div><div class="line">		arr[k] = temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//分区操作，左小右大</div><div class="line">	function partition(arr, left, right) &#123;</div><div class="line"></div><div class="line">		var sortIndex = left;</div><div class="line">		var point = arr[right];//直接选最右的作为基准元素</div><div class="line"></div><div class="line">		for (var i = left; i &lt; right; i++) &#123;</div><div class="line"></div><div class="line">			if (arr[i] &lt;= point) &#123;</div><div class="line">				swap(arr, i, sortIndex);</div><div class="line">				sortIndex++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		swap(arr, sortIndex, right);//将基准元素放置在最后的正确位置</div><div class="line">		//console.log(arr);</div><div class="line">		return sortIndex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function sort(arr, left, right) &#123;</div><div class="line">		if (left &gt; right) &#123;</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		var sortIndex = partition(arr, left, right);</div><div class="line">		sort(arr,left,sortIndex-1);</div><div class="line">		sort(arr, sortIndex + 1, right);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sort(arr, 0, arr.length - 1);</div><div class="line"></div><div class="line">	return array;</div><div class="line">&#125;</div><div class="line"></div><div class="line">quickSort(arr);</div></pre></td></tr></table></figure>
<p><strong>算法分析</strong></p>
<p>快速排序的时间主要耗费在划分操作上，对长度为 k 的区间进行划分，共需 k-1 次关键字的比较。</p>
<p><strong>最坏时间复杂度</strong></p>
<p>最坏情况是每次划分选取的基准都是当前无序区中关键字最小(或最大)的记录，划分的结果是基准左边的子区间为空(或右边的子区间为空)， 而划分所得的另一个非空的子区间中记录数目，仅仅比划分前的无序区中记录个数减少一个。 因此，快速排序必须做 n-1 次划分， 第i次划分开始时区间长度为 n-i+1，所需的比较次数为 n-i(1≤i≤n-1)，故总的比较次数达到最大值：Cmax = n(n-1)/2=O(n^2)</p>
<p>如果按上面给出的划分算法，每次取当前无序区的第 1 个记录为基准，那么当文件的记录已按递增序(或递减序)排列时， 每次划分所取的基准就是当前无序区中关键字最小(或最大)的记录，则快速排序所需的比较次数反而最多。</p>
<p><strong>最好时间复杂度</strong></p>
<p>在最好情况下，每次划分所取的基准都是当前无序区的”中值”记录，划分的结果是基准的左、右两个无序子区间的长度大致相等。 总的关键字比较次数：O(nlgn)</p>
<p>注意： 用递归树来分析最好情况下的比较次数更简单。因为每次划分后左、右子区间长度大致相等，故递归树的高度为 O(lgn)， 而递归树每一层上各结点所对应的划分过程中所需要的关键字比较次数总和不超过n，故整个排序过程所需要的关键字比较总次数 C(n)=O(nlgn)。</p>
<p>因为快速排序的记录移动次数不大于比较的次数，所以快速排序的最坏时间复杂度应为 O(n^2)，最好时间复杂度为 O(nlgn)。</p>
<p><strong>平均时间复杂度</strong></p>
<p>尽管快速排序的最坏时间为 O(n^2)，但就平均性能而言，它是基于关键字比较的内部排序算法中速度最快者，快速排序亦因此而得名。 它的平均时间复杂度为 O(nlgn)。</p>
<p><strong>基准关键字的选取</strong></p>
<p>在当前无序区中选取划分的基准关键字是决定算法性能的关键。</p>
<ul>
<li>”三者取中”的规则</li>
</ul>
<p>“三者取中”规则，即在当前区间里，将该区间首、尾和中间位置上的关键字比较，取三者之中值所对应的记录作为基准， 在划分开始前将该基准记录和该区伺的第1个记录进行交换，此后的划分过程与上面所给的 Partition 算法完全相同。</p>
<ul>
<li>取位于 low 和 high 之间的随机数k(low≤k≤high)，用 R[k] 作为基准</li>
</ul>
<p>选取基准最好的方法是用一个随机函数产生一个取位于 low 和 high 之间的随机数 k(low≤k≤high)，用 R[k] 作为基准， 这相当于强迫R[low..high]中的记录是随机分布的。用此方法所得到的快速排序一般称为随机的快速排序。</p>
<blockquote>
<p>注意： 随机化的快速排序与一般的快速排序算法差别很小。但随机化后，算法的性能大大地提高了，尤其是对初始有序的文件， 一般不可能导致最坏情况的发生。算法的随机化不仅仅适用于快速排序，也适用于其它需要数据随机分布的算法。</p>
</blockquote>
<p><strong>空间复杂度</strong></p>
<p>快速排序在系统内部需要一个栈来实现递归。若每次划分较为均匀，则其递归树的高度为 O(lgn)，故递归后需栈空间为 O(lgn)。 最坏情况下，递归树的高度为 O(n)，所需的栈空间为 O(n)。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/" target="_blank" rel="external">常见排序算法 - 快速排序 (Quick Sort)</a></li>
<li><a href="http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2016/04/07/%E7%90%86%E8%A7%A3%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/" target="_blank" rel="external">理解快速排序算法</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选一基准元素 point&lt;/li&gt;
&lt;li&gt;分区操作(partition)：小于point放左边，大于point放右边，poin
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>Ajax 笔记</title>
    <link href="http://yoursite.com/2016/11/11/Ajax%20%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/11/11/Ajax 笔记/</id>
    <published>2016-11-11T00:55:29.000Z</published>
    <updated>2017-02-03T14:02:18.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="创建-和-Code"><a href="#创建-和-Code" class="headerlink" title="创建 和 Code"></a>创建 和 Code</h3><ol>
<li>创建XMLHttpRequest()对象；</li>
<li>创建HTTP请求，链接服务器，设置请求动作FET/POST，URL，异步/同步；</li>
<li>发送HTTP请求；（三次握手四次挥手）</li>
<li>设置响应状态变化时间onreadystatechange；</li>
<li>接受返回数据(responseText,readyState,status等)；</li>
<li>使用Javascript DOM 操作，实现局部刷新。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function ajaxDemo()&#123;</div><div class="line">	var objXml;</div><div class="line">    </div><div class="line">	if(window.XMLHttpRequest)&#123;</div><div class="line">		objXml = new XMLHttpRequest();</div><div class="line">	&#125;</div><div class="line">	else&#123;</div><div class="line">		objXml = ActiveXObject(&quot;Microsoft.XMLHttp&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	objXml.open(&apos;get&apos;,&apos;demo.php&apos;,true);</div><div class="line"></div><div class="line">	objXml.onreadystatechange = function()&#123;</div><div class="line">		if(objXml.readyState == 2 &amp;&amp; objXml.status ==200)&#123;</div><div class="line">			//do something...</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	objXml.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XHR对象属性"><a href="#XHR对象属性" class="headerlink" title="XHR对象属性"></a>XHR对象属性</h3><table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onreadystatechange</td>
<td style="text-align:left">每次状态改变所触发事件的事件处理程序。</td>
</tr>
<tr>
<td style="text-align:left">responseText</td>
<td style="text-align:left">从服务器进程返回数据的字符串形式。</td>
</tr>
<tr>
<td style="text-align:left">responseXML:</td>
<td style="text-align:left">从服务器进程返回的DOM兼容的文档数据对象。</td>
</tr>
<tr>
<td style="text-align:left">status</td>
<td style="text-align:left">从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）</td>
</tr>
<tr>
<td style="text-align:left">statusText</td>
<td style="text-align:left">伴随状态码的字符串信息</td>
</tr>
</tbody>
</table>
<h4 id="readyState的返回值"><a href="#readyState的返回值" class="headerlink" title="readyState的返回值"></a>readyState的返回值</h4><table>
<thead>
<tr>
<th>返回值</th>
<th>状态说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0：</td>
<td>请求未初始化，open未调用；</td>
</tr>
<tr>
<td>1：</td>
<td>Server链接已建立，open已调用；</td>
</tr>
<tr>
<td>2：</td>
<td>请求已接收，接收到头信息了；</td>
</tr>
<tr>
<td>3：</td>
<td>请求处理中，接收到响应主体了；</td>
</tr>
<tr>
<td>4：</td>
<td>请求已完成，且响应已就绪 =&gt; 响应完成了。</td>
</tr>
</tbody>
</table>
<h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx：</td>
<td>信息类。表示接受到浏览器请求，进一步处理。</td>
</tr>
<tr>
<td>2xx：</td>
<td>成功。请求被正确接收，理解和处理。</td>
</tr>
<tr>
<td>3xx：</td>
<td>重定向。请求失败，客户采取进一步操作。</td>
</tr>
<tr>
<td>4xx：</td>
<td>客户端错误。</td>
</tr>
<tr>
<td>5xx：</td>
<td>服务器错误。服务器不能完成请求。</td>
</tr>
</tbody>
</table>
<h3 id="XHR对象方法"><a href="#XHR对象方法" class="headerlink" title="XHR对象方法"></a>XHR对象方法</h3><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">abort()</td>
<td style="text-align:left">导致当前正在执行的请求被取消</td>
</tr>
<tr>
<td style="text-align:left">getAllResponseHeaders()</td>
<td style="text-align:left">返回包含所有响应头的名称和值的单个字符</td>
</tr>
<tr>
<td style="text-align:left">getResponseHeader(name)</td>
<td style="text-align:left">返回响应头中指定的名称和值</td>
</tr>
<tr>
<td style="text-align:left">open(method,url,async,username,pwd)</td>
<td style="text-align:left">设置HTTP方法（get或post）等</td>
</tr>
<tr>
<td style="text-align:left">send(content)</td>
<td style="text-align:left">发出带有指定主体内容的请求</td>
</tr>
<tr>
<td style="text-align:left">setRequestHeader(name,value);</td>
<td style="text-align:left">使用指定的名称和值设置请求头</td>
</tr>
</tbody>
</table>
<h2 id="Ajax-的-优缺点"><a href="#Ajax-的-优缺点" class="headerlink" title="Ajax 的 优缺点"></a>Ajax 的 优缺点</h2><h3 id="Ajax的优点"><a href="#Ajax的优点" class="headerlink" title="Ajax的优点"></a>Ajax的优点</h3><h3 id="传统Ajax的问题"><a href="#传统Ajax的问题" class="headerlink" title="传统Ajax的问题"></a>传统Ajax的问题</h3><ol>
<li>可以无刷新改变页面内容，但无法改变页面URL。</li>
<li>改变URL 的hash不能很好的处理浏览器的前后，后退问题。</li>
</ol>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><ul>
<li><p>GET 与 POST</p>
</li>
<li><p>异步 与 同步</p>
</li>
<li><p>三次握手四次挥手</p>
</li>
</ul>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul>
<li><a href="https://segmentfault.com/a/1190000000691919#articleHeader3" target="_blank" rel="external">JavaScript学习总结（七）Ajax和Http状态字</a></li>
<li><a href="#">Javascript 高级编程（第三版）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工作原理&quot;&gt;&lt;/a&gt;工作原理&lt;/h2&gt;&lt;h3 id=&quot;创建-和-Code&quot;&gt;&lt;a href=&quot;#创建-和-Code&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>重新认识-盒子模型</title>
    <link href="http://yoursite.com/2016/11/08/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/11/08/重新认识-盒子模型/</id>
    <published>2016-11-08T00:55:29.000Z</published>
    <updated>2017-02-03T13:56:41.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>最近被问到盒子模型，却发现自己顿了一下，会用，却说不出个所以然。<br>这就是基础知识不扎实的漏洞！！！<br>所以，以最短的语言自我归纳了n遍！</strong></p>
</blockquote>
<p>首先，什么是盒子模型？简单来说，就是元素大小的呈现方式。<br>有一句话这么说来着 “every element in web design is a rectangular box.”</p>
<p><strong>每个盒子有四条边界：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">外边距边界margin edge + 边框边界 border edge + 内边距边界padding edge + 内容边界content edge.</div></pre></td></tr></table></figure></p>
<p><strong>然后有两种模式：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">标准盒模型：content width 和 content height 只包含内容的宽/高，不包含padding,border,margin。</div><div class="line"></div><div class="line">IE6- 怪异模式：content width 与 content height 包括 padding 和 border，不包括 margin。</div></pre></td></tr></table></figure></p>
<p>好，预（hu）备（shuo）知（ba）识（dao）说完，进入运用。</p>
<h1 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h1><p>用来改变CSS盒模型对元素宽高的计算方式。</p>
<p><strong>语法：</strong><br><code>-moz-box-sizing | box-sizing : content-box | border-box | padding-box ;</code></p>
<p><strong>值：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">content-box : 默认值，标准盒模型。</div><div class="line">实际width = content width + padding + border + margin</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">border-box : IE6- 怪异模式</div><div class="line"></div><div class="line">实际width = 内容的宽 (包含 padding-left + padding-right + border-left + border-right) + margin</div></pre></td></tr></table></figure>
<h1 id="margin叠加"><a href="#margin叠加" class="headerlink" title="margin叠加"></a>margin叠加</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">发生在普通文档流中块元素的垂直方向外边距，</div><div class="line">此时外边框高度取两者间较大的那个，</div><div class="line">行内框、 浮动框或绝对定位框之间的外边距不会叠加。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最近被问到盒子模型，却发现自己顿了一下，会用，却说不出个所以然。&lt;br&gt;这就是基础知识不扎实的漏洞！！！&lt;br&gt;所以，以最短的语言自我归纳了n遍！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，什么是盒子模型？简
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>setTimeout()和setInterval()的单细胞感情</title>
    <link href="http://yoursite.com/2016/11/06/setTimeout()%E5%92%8CsetInterval()%E7%9A%84%E5%8D%95%E7%BB%86%E8%83%9E%E6%84%9F%E6%83%85/"/>
    <id>http://yoursite.com/2016/11/06/setTimeout()和setInterval()的单细胞感情/</id>
    <published>2016-11-06T00:55:29.000Z</published>
    <updated>2017-02-03T13:56:04.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简单的语法与浅层的区别"><a href="#一、简单的语法与浅层的区别" class="headerlink" title="一、简单的语法与浅层的区别"></a>一、简单的语法与浅层的区别</h1><p><strong>语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var setT= window.setTimeout(func/code,delay);</div><div class="line">var setI = window.setInterval(func/code,delay);</div></pre></td></tr></table></figure></p>
<p>嗯，基本上是一样的，相对还有clearTimeout(setT)和clearInterval(setI)。</p>
<ul>
<li>当第二个参数delay缺省时，默认为0</li>
<li>当指定的值小于4毫秒，则增加到4ms<br>（4ms是HTML5标准指定的，对于2010年及之前的浏览器则是10ms）</li>
</ul>
<p><strong>区别：</strong></p>
<ul>
<li>setTimeout() 延时，只执行一次</li>
<li>setInterval() 每隔一段时间，循环执行。</li>
</ul>
<blockquote>
<p>一点点题外话，setTimeout递归调用自己~是可以模拟setInterval滴。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var setT = setTimeout(ourself(),100);</div><div class="line">function ourself()&#123;</div><div class="line">	/*code*/</div><div class="line">	setTimeout(ourself(),100);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="二、定时器与线程的一些事情"><a href="#二、定时器与线程的一些事情" class="headerlink" title="二、定时器与线程的一些事情"></a>二、定时器与线程的一些事情</h1><h3 id="先讲讲Javascript的工作方式，不然后面就聊不下去咯"><a href="#先讲讲Javascript的工作方式，不然后面就聊不下去咯" class="headerlink" title="先讲讲Javascript的工作方式，不然后面就聊不下去咯~"></a><strong>先讲讲Javascript的工作方式，不然后面就聊不下去咯~</strong></h3><p><strong>1. Javascript是单线程的</strong></p>
<blockquote>
<p>每个window执行一个js线程，在某个特定时刻只有特定的代码块能够执行，其他代码块被阻塞（后来的要排队是中华人民共和国的传统美德）。</p>
<p>因为Javascript的作用是 进行 交互 和 DOM操作，如果JS是多线程，那么试想一下一个线程在修改节点的内容，另一个线程要删除这个节点，那么，是修改还是删除？不知道。所以，为了避免复杂性，JS是单线程的。</p>
</blockquote>
<p><strong>2.通过回调函数进行异步</strong></p>
<blockquote>
<p>异步，就是当B等待A时，B去干别的事，当有通知时（即被告知A已完成时）B再去做该做的，而通知通过回调函数来完成。耗时几乎可忽略不计。<br>例如鼠标点击，定时器触发，或者一个XMLHttpRequest完成等</p>
</blockquote>
<p><strong>3.不靠谱的setInterval</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function formatDate()&#123;</div><div class="line">	//code...</div><div class="line">&#125;</div><div class="line">var timer, i = 0;</div><div class="line">function test()&#123;</div><div class="line">	dateStart = new Date();</div><div class="line">	timer = setInterval(function()&#123;</div><div class="line">		i++;</div><div class="line">		console.log(&apos;Interval&apos; + i);</div><div class="line">	&#125;,8000);</div><div class="line"></div><div class="line">	for(var i = 0;i &lt; 5; i++)&#123;</div><div class="line">		formatDate(dateStart);</div><div class="line">		//5 second</div><div class="line">		while( new Date() - dateStart &lt; 5*1000 )&#123;</div><div class="line">		&#125;</div><div class="line">		dateStart = new Date();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<p>主函数test()执行时间约5*5=25。</p>
<p>按理来说：<br>执行主函数期间setInterval被触发25/8=3次，s1,s2,s3<br>那么test()执行完应立即回调3次，而回调时间基本不耗时。</p>
<p>实际上：<br>在chrome下，执行以上代码，显示，<br>setInterval在主函数执行完后，只回调了一次，</p>
<p>所以，定时器智能化，在任务队列里面只保留一个回调任务，时刻8秒，s1放进去，然后时刻16秒，主逻辑还在执行，s1还在等待，那么s2被丢弃，同理，s3被丢弃。</p>
<blockquote>
<p>原因：<br>如果在一个非常大的javascript代码块执行过程中把每次间隔定时器触发的回调函数都放入队列的话，导致的结果是当这个大javascript代码块执行完毕时，有很多的回调函数会被无延迟的依次执行（这和我们当初需要间隔执行的目的相违背），所以，浏览器采用的作法是当等待队列中没有间隔定时器的回调函数时才会放入一个间隔定时器的回调函数。</p>
</blockquote>
<p><strong>假设把定时器间隔设定为9秒，那么在主逻辑执行到25秒时间内，有如下调用：</strong></p>
<blockquote>
<p>时刻9秒生成回调s1，<br>时刻18秒生成回调s2（丢弃），<br>时刻27秒生成回调s3</p>
</blockquote>
<p>结果，大概在第25秒主逻辑执行完毕，从任务队列里面取出s1执行，然后在第27秒，生成s3放到任务队列，然后JS运行时取出执行，s3-s1之间间隔，大概27-25=2s，</p>
<p>所以，定时器不靠谱不靠谱不靠谱！！不能保证每次执行会间隔起码9秒。</p>
<p>这种情况下，可以用setTimeout()嵌套调用，递归。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>setTimeout和setInterval的原理是不同的。</li>
<li>如果一个普通的定时器被阻塞了，他会等待直到有合适的时间。</li>
<li>如果间隔定时器回调函数执行时间过长，有可能无间隔的执行。</li>
</ul>
<p>——————————   2016.11.24 更新   ———————————————</p>
<h1 id="三、对于setTimeOut与setInterval的深入思考"><a href="#三、对于setTimeOut与setInterval的深入思考" class="headerlink" title="三、对于setTimeOut与setInterval的深入思考"></a>三、对于setTimeOut与setInterval的深入思考</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeOut 是用来设定延迟时间1000ms和回调函数fn的定时器，</div><div class="line">那么，</div><div class="line">究竟是什么在计算时间呢？</div><div class="line">回调函数是在什么时候执行的呢？是在等待1000ms的时候？还是一开始就执行了呢？</div></pre></td></tr></table></figure>
<h3 id="1-是什么在计算时间"><a href="#1-是什么在计算时间" class="headerlink" title="1 是什么在计算时间"></a>1 是什么在计算时间</h3><p>浏览器内核相应模块(例如Webkit 的 Timer 模块)。</p>
<h3 id="2-回调函数的执行"><a href="#2-回调函数的执行" class="headerlink" title="2 回调函数的执行"></a>2 回调函数的执行</h3><ul>
<li>这里跟Event Loop 有关系了。我将js理解为2个线程，1个是主线程，同步；另一个是 任务队列，异步回调的函数就在此处排队。待主线程空闲，就从任务队列中读取事件，这个过程就是事件循环 Event Loop。</li>
<li>当调用setTimeout()方法时，浏览器内核相应模块开始延时方法的处理，当延时方法到达触发条件时，方法被添加到用于回调的任务队列，只要执行引擎栈中的代码执行完毕，主线程就会去读取任务队列，依次执行那些满足触发条件的回调函数。</li>
</ul>
<h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="http://qingbob.com/difference-between-settimeout-setinterval/" target="_blank" rel="external">你真的了解setTimeout和setInterval吗?</a><br><a href="http://www.jeffjade.com/2016/01/10/2016-01-10-javaScript-setInterval/" target="_blank" rel="external">你所不知道的setInterval</a><br><a href="http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/" target="_blank" rel="external">TAT.ronnie【转向Javascript系列】从setTimeout说事件循环模型</a><br><a href="http://ejohn.org/blog/how-javascript-timers-work/" target="_blank" rel="external">How JavaScript Timers Work</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、简单的语法与浅层的区别&quot;&gt;&lt;a href=&quot;#一、简单的语法与浅层的区别&quot; class=&quot;headerlink&quot; title=&quot;一、简单的语法与浅层的区别&quot;&gt;&lt;/a&gt;一、简单的语法与浅层的区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;br&gt;&lt;f
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://yoursite.com/2016/11/05/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/11/05/插入排序/</id>
    <published>2016-11-05T00:55:29.000Z</published>
    <updated>2017-02-03T14:00:50.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法原理："><a href="#算法原理：" class="headerlink" title="算法原理："></a>算法原理：</h2><p>设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 插入上述表长为 n-1 的有序序列，得一个表长为 n 的有序序列。</p>
<h2 id="个人实现思路："><a href="#个人实现思路：" class="headerlink" title="个人实现思路："></a>个人实现思路：</h2><p>1.设第一个elem( n=0 ) 已排好序A。<br>2.从第二个elem( n=1 )开始，<br>3.在找到准备插入的位置后，需要将该位置之后的数组元素往后挪一位；<br>  所以，在对比之前，要先记录自身元素的值。<br>4.【从后→前】对比，若 A[last] &gt; elem ,那么交换位置，直到 A[elem] &lt; elem ,本轮结束，elem已排好位置。<br>5.重复步骤2-4，直至到达数组最后一位。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var arr = [1,3,9,6,5,2,7,2,3,4,8];</div><div class="line"></div><div class="line">function insertSort(arr)&#123;</div><div class="line">	</div><div class="line">	for(var i = 1; i &lt; arr.length; i++)&#123;</div><div class="line">		</div><div class="line">		var tmp = arr[i];</div><div class="line">		for( var j = i-1; j &gt; 0 , arr[j] &gt; tmp; j--)&#123;</div><div class="line">			arr[ j+1 ] = arr[ j ];</div><div class="line">			arr[ j ] = tmp;</div><div class="line">	&#125;</div><div class="line">	console.log(arr);</div><div class="line">	return arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">insertSort(arr);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法原理：&quot;&gt;&lt;a href=&quot;#算法原理：&quot; class=&quot;headerlink&quot; title=&quot;算法原理：&quot;&gt;&lt;/a&gt;算法原理：&lt;/h2&gt;&lt;p&gt;设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
  <entry>
    <title>Math.random()随机数的一些事一些情</title>
    <link href="http://yoursite.com/2016/11/05/Math.random()%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E4%B8%80%E4%BA%9B%E6%83%85/"/>
    <id>http://yoursite.com/2016/11/05/Math.random()随机数的一些事一些情/</id>
    <published>2016-11-05T00:55:29.000Z</published>
    <updated>2017-02-03T13:55:15.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math-random-随机数的一些事一些情"><a href="#Math-random-随机数的一些事一些情" class="headerlink" title="Math.random()随机数的一些事一些情"></a><strong>Math.random()随机数的一些事一些情</strong></h1><h3 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h3><h4 id="Math"><a href="#Math" class="headerlink" title="Math()"></a>Math()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Math.ceil();  //向上取整。</div><div class="line"></div><div class="line">Math.floor();  //向下取整。</div><div class="line"></div><div class="line">Math.round();  //四舍五入。</div><div class="line"></div><div class="line">Math.random();  //[0,1) 之间的一个伪随机数。</div><div class="line"></div><div class="line">Math.ceil(Math.random()*10);  // 获取从1到10的随机整数 ，取0的概率极小。</div><div class="line"></div><div class="line">Math.round(Math.random());   //可均衡获取0到1的随机整数。</div><div class="line"></div><div class="line">Math.floor(Math.random()*10);  //可均衡获取0到9的随机整数。</div><div class="line"></div><div class="line">Math.round(Math.random()*10);  //基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。</div><div class="line">//因为结果在0~0.4 为0，0.5到1.4为1...8.5到9.4为9，9.5到9.9为10。所以头尾的分布区间只有其他数字的一半。</div></pre></td></tr></table></figure>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var d = new Date();</div><div class="line"></div><div class="line">var n = d.getSeconds(); //生成0到59的随机数</div><div class="line"></div><div class="line">var n1 = d.getMilliseconds(); //生成0到999的随机数</div><div class="line"></div><div class="line">var n2 = d.getMilliseconds() % 201; //生成0到200的随机数</div><div class="line">//除了取 Date 的秒和微秒外，还可以取小时和分钟（跟取秒生成的随机数相同）。</div></pre></td></tr></table></figure>
<h4 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String.toString() //返回用字符串表示的特定对象</div><div class="line"></div><div class="line">String.substr(start[, length]) //返回字符串中从指定位置开始到指定长度的子字符串</div><div class="line"></div><div class="line">String.substring(indexStart[, indexEnd]) //返回字符串两个索引之间（或到字符串末尾）的子串</div><div class="line"></div><div class="line">String.slice(beginSlice[, endSlice]) //浅复制，提取字符串并返回新字符串</div><div class="line"></div><div class="line">RegExp</div><div class="line"></div><div class="line">字母ASCII码:A-65,a-97</div></pre></td></tr></table></figure>
<h3 id="二、应用"><a href="#二、应用" class="headerlink" title="二、应用"></a>二、应用</h3><blockquote>
<p>产生10个随机数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [],r;</div><div class="line">for(var i=0;i&lt;10;i++)&#123;</div><div class="line">	r = (Math.random()/(new Date()-0)).toString(36).replace(/\d/g,&apos;&apos;).slice(1);</div><div class="line">	arr[i] ? (arr[i]+=1) : (arr[i]=r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>长度为5的随机数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var c = &apos;&apos;; c.length &lt; 5;) &#123;</div><div class="line">	c += Math.random().toString(36).substr(2,1)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>利用字母ASCII码[65,97]，生成长度为x的随机数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function rand(x) &#123;</div><div class="line"></div><div class="line">	var s = &quot;&quot;;</div><div class="line"></div><div class="line">	while (s.length &lt; x &amp;&amp; x &gt; 0) &#123;</div><div class="line">		var r = Math.random();</div><div class="line">		s += String.fromCharCode(Math.floor(r * 26) + (r &gt; 0.5 ? 97 : 65));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return s;</div><div class="line">&#125;</div><div class="line">rand(x);</div></pre></td></tr></table></figure>
<blockquote>
<p>生成指定范围随机数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Math.floor(Math.random() * (上限 - 下限 + 1) + 下限);</div><div class="line"></div><div class="line">Math.ceil(Math.random() * (上限 - 下限) + 下限);</div><div class="line"></div><div class="line">parseInt(Math.random() * (上限 - 下限 + 1) + 下限);</div><div class="line"></div><div class="line">//under：上限; over：下限; ceil</div><div class="line">function getRandom(under, over) &#123;</div><div class="line">	switch (arguments.length) &#123;</div><div class="line">		case 1:</div><div class="line">			return Math.ceil(Math.random() * under);</div><div class="line">		case 2:</div><div class="line">			return Math.ceil(Math.random() * (over - under) + under);</div><div class="line">		default:</div><div class="line">			return 0;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>随机背景色</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//方1</div><div class="line">&apos;#&apos;+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6);</div><div class="line"></div><div class="line">//方2</div><div class="line">&quot;#&quot;+(&quot;000000&quot;+Math.floor(Math.random()*16777216).toString(16)).substr(-6);</div><div class="line"></div><div class="line">//方3</div><div class="line">function randomColor()&#123;</div><div class="line">  var r=function()&#123;return Math.floor(Math.random()*256)&#125;;</div><div class="line">  return &quot;rgb(&quot;+r()+&quot;,&quot;+r()+&quot;,&quot;+r()+&quot;)&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>洗牌算法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var i = 0,</div><div class="line">	data = [],</div><div class="line">	r;</div><div class="line"></div><div class="line">for (; i &lt; 10; data[i++] = i);</div><div class="line"></div><div class="line">while (--i) &#123;</div><div class="line"></div><div class="line">	r = Math.round(Math.random() * 9 + 1) - 1;</div><div class="line">	data[i] = data[i] + data[r], data[r] = data[i] - data[r], data[i] = data[i] - data[r];</div><div class="line">&#125;</div><div class="line">console.log(data)</div></pre></td></tr></table></figure>
<blockquote>
<p>或者利用Array.prototype.sort()函数，这里可以不把里面的数值带进来运算。</p>
<p>首先Math.random()会生成一个[0,1)之间的数值，用0.5这个比较公平的数值减去它，概率得到小于0，等于0,大于0三种状况，而Array.prototype.sort()期待的数值恰好是[-1,0,1]，是不是很省事。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var i = 0,</div><div class="line">	data = [],</div><div class="line">	r;</div><div class="line"></div><div class="line">for (; i &lt; 10; data[i++] = i);</div><div class="line"></div><div class="line">data.sort(function() &#123;</div><div class="line"></div><div class="line">	return .5 - Math.random();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Math-random-随机数的一些事一些情&quot;&gt;&lt;a href=&quot;#Math-random-随机数的一些事一些情&quot; class=&quot;headerlink&quot; title=&quot;Math.random()随机数的一些事一些情&quot;&gt;&lt;/a&gt;&lt;strong&gt;Math.random
    
    </summary>
    
      <category term="Exercise" scheme="http://yoursite.com/categories/Exercise/"/>
    
    
  </entry>
  
</feed>
